{"version":3,"sources":["../../sdk/utils/helpers.js","../../sdk/components/input/StyledButton.js","../../sdk/components/Timeline/utils.js","../../sdk/components/Timeline/TimelinePaths.js","components/ContextWrappers.js","definitions/utils.js","../../connections-table/components/ConnectionsTableRow.js","../../connections-table/components/ConnectionsTable.js","../../connections-table/description.md","../../connections-table/index.js","../../streams-table/components/StreamsTable.js","../../streams-table/description.md","../../streams-table/index.js","definitions/approvedViz.js","components/CatalogueItem.js","components/HeaderTabs.js","components/SelectedComponent.js","components/Page.js","App.js","serviceWorker.js","index.js","../../connections-table/components/cellContent.js","../../streams-table/components/cellContent.js","../../sdk/theme/fontFaces.js","../../sdk/theme/theme.js","../../sdk/components/context/ThemeSetter.js","../../sdk/components/Timeline/TimeSlider.js","../../sdk/components/Timeline/Timeline.js","../../proto/index.js","../../proto/protobuf/introspection_pb.js","../../sdk/components/input/SampleDataButton.js","../../sdk/components/input/UploadDataButton.js","../../sdk/storybook/StorybookWrapper.js","../../connections-table/screenshot.png","../../streams-table/screenshot.png","../../sdk/components/DataTable/styledTable.js","../../sdk/components/DataTable/DataTableRow.js","../../sdk/theme/icons.js","../../sdk/components/Icon.js","../../sdk/components/DataTable/DataTableHead.js","../../sdk/components/DataTable/DataTable.js","../../sdk/components/DataTable/numberFields.js","../../sdk/components/PeerId.js","../../sdk/hooks/useSorter.js","../../sdk/hooks/useTabularData.js","../../sdk/index.js","../../sdk/theme/fonts/Nexa-Light.otf","../../sdk/theme/fonts/Nexa-Bold.otf","../../sdk/theme/fonts/IBMPlexSans-ExtraLight.otf","../../sdk/theme/fonts/IBMPlexSans-Light.otf","../../sdk/theme/fonts/IBMPlexSans-Regular.otf","../../sdk/theme/fonts/IBMPlexSans-Text.otf","../../sdk/theme/fonts/IBMPlexSans-Medium.otf","../../sdk/theme/fonts/IBMPlexSans-SemiBold.otf","../../sdk/theme/fonts/IBMPlexSans-Bold.otf","../../sdk/theme/fonts/IBMPlexMono-Light.otf","../../sdk/theme/fonts/IBMPlexMono-Text.otf","../../sdk/theme/fonts/IBMPlexMono-SemiBold.otf","../../sdk/theme/icons/asc.svg","../../sdk/theme/icons/desc.svg","../../sdk/components/context/DataProvider.js","../../sdk/theme/icons/sort.svg","../../sdk/theme/icons/filter.svg","../../connections-table/definitions/connectionsColumns.js","../../connections-table/utils/statusSorter.js","../../streams-table/definitions/streamsColumns.js","../../streams-table/utils/statusSorter.js","../../proto/samples/index.js","../../proto/samples/sample.mock.base64","../../proto/utils/binary.js","../../proto/utils/enums.js","../../proto/utils/helpers.js"],"names":["childrenToString","children","Array","isArray","join","validateNumbers","obj","errors","Object","entries","reduce","key","num","isNaN","length","Error","StyledButton","styled","button","theme","spacing","isActive","top","bottom","color","getMaxAreaPeak","stackedData","maxOverall","timeDatum","Math","max","maxHere","connDatum","getTrafficOverTime","dataset","allPeerIds","direction","timepoints","timepoint","timeIndex","getTrafficForAllPeers","connectionsById","getConnections","connection","getPeerId","trafficByPeer","peerId","bytes","getTraffic","previousTimepoint","previousConn","find","conn","time","getTime","stackData","allConnections","allConns","filter","testConn","some","existingConn","sort","a","b","aIn","bIn","aOut","map","dataStacker","stack","keys","dataInOverTime","dataOutOverTime","stackedDataIn","stackedDataOut","maxIn","maxOut","xScale","scaleTime","yScaleIn","scaleLinear","yScaleOut","minTimeForScale","maxTimeForScale","getLatestTimepoint","getInstantTs","domain","fitDataToPaths","fitDataArgs","availableWidth","availableHeight","range","areaMakerIn","area","x","d","data","y0","y1","areaMakerOut","dataInPathDefs","datum","pathDef","dataOutPathDefs","TimelinePaths","pathDefs","svgHeight","colorKey","globalPeerId","useContext","PeerContext","setPeerId","SetterContext","StyledSvg","svg","index","isHighlighted","StyledPath","path","attrs","name","onMouseEnter","onMouseLeave","ContextWrappers","validateComponentFields","componentBundle","Component","description","tags","screenshot","ConnectionsTableRow","rowContentProps","columnDefs","value","highlighted","ConnectionsTable","TimeContext","useTabularData","columns","connectionsColumnDefs","defaultSort","tableContentProps","sortColumn","setSortColumn","sortDirection","setSortDirection","TableRow","StreamsTable","streamsData","getAllStreamsAtTime","streamsColumnDefs","approvedViz","connectionsTable","streamsTable","CatalogueCard","div","isSelected","CardContent","Tag","li","text","TagList","ul","StyledImg","img","StyledHeader","h3","StyledHeaderInner","span","CatalogueItem","handleSelect","onClick","src","source","tag","HeaderTabs","useState","selectedTab","setSelectedTab","dispatchDataset","changeTab","tabIndex","action","TabsWrapper","SelectedTab","UnselectedTab","ButtonWrapper","SampleDataTab","title","UploadDataTab","ConnectWebsocketTab","SelectedComponent","viz","HEADER_HEIGHT","FOOTER_HEIGHT","Page","selected","setSelected","Main","CatalogueBkg","Header","Footer","height","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","PeerIdContent","clipboard","writeText","id","BytesContent","label","AgeContent","getFontFace","font","file","weight","format","nexa_light","nexa_bold","plexSans_extraLight","plexSans_light","plexSans_regular","plexSans_text","plexSans_medium","plexSans_semiBold","plexSans_bold","plexMono_light","plexMono_text","plexMono_semiBold","palette","primary","light","mid","dark","secondary","tertiary","notice","typography","default","body","small","medium","large","heading","elem","size","rgb","tableCell","col","lightness","alpha","styles","ThemeSetter","ThemeProvider","GlobalFontFaceStyles","createGlobalStyle","fontFaces","GlobalDefaults","Container","BeforeTime","TimeMarker","width","AfterTime","TimeSlider","DataContext","setTimepoint","indexOf","decimal","setDecimal","isSliding","setIsSliding","containerRef","useRef","widthPerTime","slideEnd","handleMouseMove","e","nearestIndex","floor","snappedDecimal","min","getSnapped","nativeEvent","clientX","current","offsetLeft","timeMarkerLeft","round","onMouseDown","event","onMouseUp","onMouseMove","ref","style","left","HEIGHT_DEFAULT","withResizeDetector","useMemo","PathsContainer","Label","DataInLabel","DataOutLabel","marginTop","_defineProperty","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","push","apply","protobuf","samples","binary","enums","helpers","module","exports","target","i","arguments","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","_objectSpread","jspb","goog","global","Function","google_protobuf_timestamp_pb","extend","proto","exportSymbol","introspection","Version","opt_data","Message","initialize","this","inherits","DEBUG","COMPILED","displayName","ResultCounter","SlidingCounter","DataGauge","Runtime","EndpointPair","Traffic","StreamList","repeatedFields_","Connection","oneofGroups_","Timeline","Attributes","Stream","ConnectionRef","DHT","Params","Query","Subsystems","State","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","version","getFieldWithDefault","$jspbMessageInstance","deserializeBinary","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","readUint32","setVersion","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","f","getVersion","writeUint32","setProto3IntField","total","ok","err","setTotal","setOk","setErr","undefined","getTotal","getOk","getErr","over1m","over5m","over15m","over30m","over1hr","over2hr","over4hr","over8hr","over12hr","over24hr","setOver1m","setOver5m","setOver15m","setOver30m","setOver1hr","setOver2hr","setOver4hr","setOver8hr","setOver12hr","setOver24hr","getOver1m","getOver5m","getOver15m","getOver30m","getOver1hr","getOver2hr","getOver4hr","getOver8hr","getOver12hr","getOver24hr","cumBytes","cumPackets","instBw","readUint64","setCumBytes","setCumPackets","setInstBw","getCumBytes","writeUint64","getCumPackets","getInstBw","implementation","platform","readString","setImplementation","setPlatform","getImplementation","writeString","getPlatform","setProto3StringField","srcMultiaddr","dstMultiaddr","setSrcMultiaddr","setDstMultiaddr","getSrcMultiaddr","getDstMultiaddr","trafficIn","getTrafficIn","trafficOut","getTrafficOut","readMessage","setTrafficIn","setTrafficOut","writeMessage","getWrapperField","setWrapperField","clearTrafficIn","hasTrafficIn","getField","clearTrafficOut","hasTrafficOut","streamIdsList","getStreamIdsList_asB64","streamsList","toObjectList","getStreamsList","readBytes","addStreamIds","addStreams","getStreamIdsList_asU8","writeRepeatedBytes","writeRepeatedMessage","getStreamIdsList","getRepeatedField","bytesListAsB64","bytesListAsU8","setStreamIdsList","setField","opt_index","addToRepeatedField","clearStreamIdsList","getRepeatedWrapperField","setStreamsList","setRepeatedWrapperField","opt_value","addToRepeatedWrapperField","clearStreamsList","RelayedOverCase","RELAYED_OVER_NOT_SET","CONN_ID","CONN","getRelayedOverCase","computeOneofCase","getId_asB64","status","transportId","getTransportId_asB64","endpoints","getEndpoints","timeline","getTimeline","role","traffic","attribs","getAttribs","latencyNs","streams","getStreams","connId","getConnId_asB64","getConn","userProvidedTagsList","setId","readEnum","setStatus","setTransportId","setEndpoints","setTimeline","setRole","setTraffic","setAttribs","setLatencyNs","setStreams","setConnId","setConn","addUserProvidedTags","getId_asU8","writeBytes","getStatus","writeEnum","getTransportId_asU8","getRole","getLatencyNs","getUserProvidedTagsList","writeRepeatedString","openTs","getOpenTs","Timestamp","upgradedTs","getUpgradedTs","closeTs","getCloseTs","setOpenTs","setUpgradedTs","setCloseTs","clearOpenTs","hasOpenTs","clearUpgradedTs","hasUpgradedTs","clearCloseTs","hasCloseTs","multiplexer","encryption","setMultiplexer","setEncryption","getMultiplexer","getEncryption","getId","bytesAsB64","bytesAsU8","setProto3BytesField","setProto3EnumField","getTransportId","clearEndpoints","hasEndpoints","clearTimeline","hasTimeline","clearTraffic","hasTraffic","clearAttribs","hasAttribs","clearStreams","hasStreams","getConnId","getConnId_asU8","setOneofField","clearConnId","hasConnId","setOneofWrapperField","clearConn","hasConn","setUserProvidedTagsList","clearUserProvidedTagsList","protocol","setProtocol","getProtocol","ConnectionCase","CONNECTION_NOT_SET","getConnectionCase","enabled","getBooleanFieldWithDefault","startTs","getStartTs","params","getParams","queryList","getQueryList","readBool","setEnabled","setStartTs","setParams","addQuery","getEnabled","writeBool","k","disjointPaths","setK","setAlpha","setDisjointPaths","getK","getAlpha","getDisjointPaths","targetPeerId","totalTimeMs","totalSteps","peerIdsList","trigger","type","result","sentTs","getSentTs","setTargetPeerId","setTotalTimeMs","setTotalSteps","addPeerIds","setTrigger","setType","setResult","setSentTs","getTargetPeerId","getTotalTimeMs","getTotalSteps","getPeerIdsList","getTrigger","getType","getResult","Trigger","API","DISCOVERY","Type","CONTENT","PROVIDER","VALUE","Result","SUCCESS","ERROR","TIMEOUT","PENDING","setPeerIdsList","clearPeerIdsList","clearSentTs","hasSentTs","setProto3BooleanField","clearStartTs","hasStartTs","clearParams","hasParams","setQueryList","clearQueryList","connectionsList","getConnectionsList","dht","getDht","addConnections","setDht","setConnectionsList","clearConnectionsList","clearDht","hasDht","runtime","getRuntime","subsystems","getSubsystems","instantTs","snapshotDurationMs","setRuntime","setSubsystems","setInstantTs","setSnapshotDurationMs","getSnapshotDurationMs","clearVersion","hasVersion","clearRuntime","hasRuntime","clearSubsystems","hasSubsystems","clearInstantTs","hasInstantTs","Status","ACTIVE","CLOSED","OPENING","CLOSING","Role","INITIATOR","RESPONDER","getSampleData","b64string","buf","Buffer","from","parseBuffer","isSample","SampleDataButton","isLoading","setIsLoading","buttonText","setTimeout","UploadDataButton","fileName","setFileName","fileInputRef","FileButton","NativeFileInput","input","RelativeSpan","getButtonText","click","onChange","FileReader","files","onload","newFileName","bin","currentTarget","handleUploadComplete","readAsArrayBuffer","Table","table","tr","TableHead","th","TableCell","td","DataTableRow","rowProps","prerenderedCells","cellIndex","renderContent","cellProps","asc","desc","Icon","active","StyledIcon","icons","offset","NON_BREAKING_SPACE","DataTableHead","columnDef","props","isSortable","isSorted","sortIconType","getSortType","sortable","header","defaultSortDirection","defaultDirection","sortIconAction","DataTable","rowIndex","FormatedNumber","units","initialWeight","Unit","unitEntries","unitIndex","findIndex","divider","unit","formattedValue","toFixed","weightAdjust","NumWrapper","TimeNumber","ms","s","mins","hrs","days","DataNumber","kb","mb","gb","tb","StyledSpan","PeerId","truncatedId","slice","getNumericSorter","getStringSorter","caselessSorter","Intl","Collator","compare","sortNum","defaultOptions","useSorter","getSorter","mapSorter","directionOptions","disabled","sorter","directionOptionKeys","option","includes","validateDirection","makeSorter","propTypes","T","array","isRequired","func","string","arrayOf","node","bool","mapSorterToColumn","colName","sortColumnIndex","row","DefaultRenderer","defaultFilter","column","assign","getProps","applyColumnDefaults","sortDef","columnIndex","getTableContentProps","any","shape","required","elementType","instanceOf","Map","createContext","updateData","oldData","newData","appendToDataSet","replaceDataSet","DataProvider","initialData","initialTime","useReducer","latestTimepoint","dataSetters","Provider","stringSorter","numericSorter","getAge","transportIdBin","transportIdInt","readUIntLE","transportNames","statusNames","statusSorter","openFirstOrder","closedFirstOrder","statusOrder","peerIdCol","transportCol","dataInCol","stream","dataOutCol","createBufferSegment","state","_state$serializeBinar","buffer","byteLength","lengthBuffer","alloc","writeUIntLE","contentBuffer","concat","bytesParsed","messages","stateMessageStart","stateMessageEnd","stateMessageBin","toString","stateMessage","0","1","2","3","4","roleNames","_slicedToArray","_toConsumableArray","timestamp","getSeconds","getAllConnections","_ref","_ref$latest","latest","previousConns","newConns","testConnection","getEnumByName","entry","_ref2","_ref3","values","parseInt","getTimeIndex","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","return","byDirection","byType"],"mappings":"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","file":"static/js/main.858aa099.chunk.js","sourcesContent":["// Temporary function for temp tooltip placeholder - flattens jsx-ified template strings\n// Remove this as soon as it's not needed\nfunction childrenToString(children) {\n  if (typeof children === 'string') return children\n  if (Array.isArray(children)) return children.join('')\n  if (!children) return ''\n}\n\n// d3 data processors can fail very late if NaN or similar creep in.\n// Use this to fail early in memoised or non-perf-intensive functions.\nfunction validateNumbers(obj) {\n  const errors = Object.entries(obj).reduce(\n    (errors, [key, num]) =>\n      isNaN(num)\n        ? [...errors, `${key} is not numeric, is ${typeof num}: ${num}`]\n        : errors,\n    []\n  )\n\n  if (errors.length) throw new Error(errors.join('\\n\\n '))\n}\n\nexport { childrenToString, validateNumbers }\n","import styled from 'styled-components'\n\nconst StyledButton = styled.button`\n  padding: ${({ theme }) => `${theme.spacing(0.5)} ${theme.spacing()}`};\n  position: relative;\n  z-index: 5;\n  cursor: pointer;\n  font-weight: bold;\n  border-radius: 12px;\n  &:focus {\n    outline: none;\n  }\n  ${({ theme, isActive }) => {\n    const top = isActive ? 'dark' : 'light'\n    const bottom = isActive ? 'light' : 'dark'\n    return `\n      background: ${theme.color('tertiary', isActive ? 'dark' : 'mid')};\n      border-top: 4px solid ${theme.color(top, 'mid', 0.3)};\n      border-left: 4px solid ${theme.color(top, 'mid', 0.3)};\n      border-bottom: 4px solid ${theme.color(bottom, 'mid', 0.3)};\n      border-right: 4px solid ${theme.color(bottom, 'mid', 0.3)};\n      color: ${theme.color(isActive ? 'light' : 'text', 'mid')};\n    `\n  }}\n`\n\nexport default StyledButton\n","import { area, scaleLinear, scaleTime, stack } from 'd3'\n\nimport { getLatestTimepoint, getTime, getTraffic, getConnections } from 'proto'\nimport { validateNumbers } from '../../utils/helpers'\n\nfunction getMaxAreaPeak(stackedData) {\n  return stackedData.reduce(\n    (maxOverall, timeDatum) =>\n      Math.max(\n        maxOverall,\n        timeDatum.reduce(\n          (maxHere, connDatum) =>\n            // connDatum[1] is the upper point in a stacked area slice\n            Math.max(maxHere, connDatum[1]),\n          0\n        )\n      ),\n    0\n  )\n}\n\nfunction getTrafficOverTime(dataset, allPeerIds, direction) {\n  return dataset.reduce(\n    // Get array of objects of bytes added in each timepoint keyed by peerId\n    // Can't calculate bytes added in first timepoint, so skip where index is 0\n    (timepoints, timepoint, timeIndex) =>\n      !timeIndex\n        ? []\n        : [\n            ...timepoints,\n            getTrafficForAllPeers(\n              dataset,\n              timepoint,\n              timeIndex,\n              allPeerIds,\n              direction\n            ),\n          ],\n    []\n  )\n}\n\nfunction getTrafficForAllPeers(\n  dataset,\n  timepoint,\n  timeIndex,\n  allPeerIds,\n  direction\n) {\n  if (!dataset || !timepoint) return []\n\n  const connectionsById = getConnections(timepoint).reduce(\n    (connectionsById, connection) => {\n      connectionsById[connection.getPeerId()] = connection\n      return connectionsById\n    },\n    {}\n  )\n\n  const trafficByPeer = allPeerIds.reduce(\n    (trafficByPeer, peerId) => {\n      const connection = connectionsById[peerId]\n\n      let bytes = 0\n\n      if (connection) {\n        bytes = getTraffic(connection, direction, 'bytes')\n\n        // Use only those bytes added in this time point\n        // Can't get bytes added first to previous, so skip it\n        const previousTimepoint = dataset[timeIndex - 1]\n        const previousConn = getConnections(previousTimepoint).find(\n          conn => conn.getPeerId() === peerId\n        )\n        if (previousConn) {\n          bytes -= getTraffic(previousConn, direction, 'bytes')\n        }\n      }\n\n      trafficByPeer[peerId] = bytes\n      return trafficByPeer\n    },\n    { time: getTime(timepoint) }\n  )\n  validateNumbers(trafficByPeer)\n  return trafficByPeer\n}\n\nfunction stackData(dataset) {\n  if (!dataset || !dataset.length) return {}\n\n  const allConnections = dataset.reduce(\n    (allConns, timepoint) => [\n      ...getConnections(timepoint).filter(\n        testConn =>\n          !allConns.some(\n            existingConn => testConn.getPeerId() === existingConn.getPeerId()\n          )\n        // Reverse the array so the sorter sees the last occurence of each connection\n      ),\n      ...allConns,\n    ],\n    []\n  )\n\n  allConnections.sort((a, b) => {\n    const aIn = getTraffic(a, 'in', 'bytes')\n    const bIn = getTraffic(b, 'in', 'bytes')\n    const aOut = getTraffic(a, 'out', 'bytes')\n    const bOut = getTraffic(b, 'out', 'bytes')\n\n    const aTotal = aIn + aOut\n    const bTotal = bIn + bOut\n    return bTotal - aTotal\n  })\n\n  const allPeerIds = allConnections.map(conn => conn.getPeerId())\n  const dataStacker = stack().keys(allPeerIds)\n\n  const dataInOverTime = getTrafficOverTime(dataset, allPeerIds, 'in')\n  const dataOutOverTime = getTrafficOverTime(dataset, allPeerIds, 'out')\n\n  const stackedDataIn = dataStacker(dataInOverTime)\n  const stackedDataOut = dataStacker(dataOutOverTime)\n\n  const maxIn = getMaxAreaPeak(stackedDataIn)\n  const maxOut = getMaxAreaPeak(stackedDataOut)\n\n  const xScale = scaleTime()\n  const yScaleIn = scaleLinear()\n  const yScaleOut = scaleLinear()\n\n  // Scaling from dataset[0] leaves a gap of the width of 1 datapoint\n  const minTimeForScale = getTime(dataset[1])\n  const maxTimeForScale = getLatestTimepoint(dataset).getInstantTs()\n\n  validateNumbers({\n    maxIn,\n    maxOut,\n    minTimeForScale,\n    maxTimeForScale,\n  })\n\n  xScale.domain([minTimeForScale, maxTimeForScale])\n  yScaleIn.domain([0, maxIn])\n  yScaleOut.domain([0, maxOut])\n\n  return {\n    stackedDataIn,\n    stackedDataOut,\n    xScale,\n    yScaleIn,\n    yScaleOut,\n  }\n}\n\nfunction fitDataToPaths(fitDataArgs) {\n  const [\n    availableWidth,\n    availableHeight,\n    stackedDataIn,\n    stackedDataOut,\n    xScale,\n    yScaleIn,\n    yScaleOut,\n  ] = fitDataArgs\n\n  if (!stackedDataIn) return {}\n\n  xScale.range([0, availableWidth])\n  yScaleIn.range([availableHeight, 0])\n  yScaleOut.range([0, availableHeight])\n\n  const areaMakerIn = area()\n    .x(d => xScale(d.data.time))\n    .y0(d => yScaleIn(d[0]))\n    .y1(d => yScaleIn(d[1]))\n\n  const areaMakerOut = area()\n    .x(d => xScale(d.data.time))\n    .y0(d => yScaleOut(d[0]))\n    .y1(d => yScaleOut(d[1]))\n\n  const dataInPathDefs = stackedDataIn.map(datum => ({\n    pathDef: areaMakerIn(datum),\n    peerId: datum.key,\n  }))\n  const dataOutPathDefs = stackedDataOut.map(datum => ({\n    pathDef: areaMakerOut(datum),\n    peerId: datum.key,\n  }))\n\n  return {\n    dataInPathDefs,\n    dataOutPathDefs,\n  }\n}\n\nexport { getMaxAreaPeak, getTrafficOverTime, stackData, fitDataToPaths }\n","import React, { useContext } from 'react'\nimport T from 'prop-types'\nimport styled from 'styled-components'\n\nimport { SetterContext, PeerContext } from '../context/DataProvider'\n\nfunction TimelinePaths({ pathDefs, svgHeight, colorKey }) {\n  const globalPeerId = useContext(PeerContext)\n  const { setPeerId } = useContext(SetterContext)\n\n  const StyledSvg = styled.svg`\n    width: 100%;\n    height: ${svgHeight}px;\n\n    // TODO: make this less hacky, adjust in path defs\n    margin-bottom: -4px;\n  `\n\n  return (\n    <StyledSvg>\n      {pathDefs &&\n        pathDefs.map(({ pathDef, peerId }, index) => {\n          const isHighlighted = peerId === globalPeerId\n\n          function mouseEnterHandler() {\n            if (peerId !== globalPeerId) setPeerId(peerId)\n          }\n          function mouseLeaveHandler() {\n            if (globalPeerId) setPeerId(null)\n          }\n\n          const StyledPath = styled.path.attrs({\n            d: pathDef,\n            name: peerId,\n          })`\n            fill: ${({ theme }) =>\n              theme.color(\n                isHighlighted ? 'tertiary' : colorKey,\n                'mid',\n                index % 2 ? 0.6 : 0.8\n              )};\n          `\n          const key = `${peerId}_paths`\n          return (\n            <StyledPath\n              key={key}\n              onMouseEnter={mouseEnterHandler}\n              onMouseLeave={mouseLeaveHandler}\n            />\n          )\n        })}\n    </StyledSvg>\n  )\n}\n\nTimelinePaths.propTypes = {\n  pathDefs: T.array,\n  svgHeight: T.number.isRequired,\n  colorKey: T.string.isRequired,\n}\n\nexport default TimelinePaths\n","import React from 'react'\nimport T from 'prop-types'\nimport { ThemeSetter, DataProvider } from 'sdk'\n\nfunction ContextWrappers({ children }) {\n  return (\n    <ThemeSetter>\n      <DataProvider>{children}</DataProvider>\n    </ThemeSetter>\n  )\n}\nContextWrappers.propTypes = {\n  children: T.node,\n}\n\nexport default ContextWrappers\n","function validateComponentFields(componentBundle) {\n  const { name, Component, description, tags, screenshot } = componentBundle\n\n  if (!name || typeof name !== 'string')\n    throw new Error(`Invalid component name \"${name}\" (${typeof name})`)\n  if (!Component || typeof Component !== 'function')\n    throw new Error(\n      `Invalid Component renderer for ${name} (${typeof Component})`\n    )\n  if (!description || typeof description !== 'string')\n    throw new Error(\n      `Invalid component description \"${description}\" for ${name} (${typeof description})`\n    )\n  if (!tags || !Array.isArray(tags))\n    throw new Error(`Invalid component tags for ${name} (${typeof tags})`)\n\n  return {\n    name,\n    Component,\n    description,\n    tags,\n    screenshot,\n  }\n}\n\nexport { validateComponentFields }\n","import React, { useContext } from 'react'\nimport T from 'prop-types'\nimport { DataTableRow, PeerContext, SetterContext } from 'sdk'\n\nfunction ConnectionsTableRow({ rowContentProps, columnDefs }) {\n  const globalPeerId = useContext(PeerContext)\n  const { setPeerId } = useContext(SetterContext)\n\n  const peerId = rowContentProps[0].value\n\n  function mouseEnterHandler() {\n    if (peerId !== globalPeerId) setPeerId(peerId)\n  }\n  function mouseLeaveHandler() {\n    if (globalPeerId) setPeerId(null)\n  }\n\n  return (\n    <DataTableRow\n      rowContentProps={rowContentProps}\n      columnDefs={columnDefs}\n      onMouseEnter={mouseEnterHandler}\n      onMouseLeave={mouseLeaveHandler}\n      highlighted={peerId === globalPeerId}\n    />\n  )\n}\n\nConnectionsTableRow.propTypes = {\n  rowContentProps: T.array.isRequired,\n  columnDefs: T.array.isRequired,\n}\n\nexport default ConnectionsTableRow\n","import React, { useContext } from 'react'\n\nimport { getConnections } from 'proto'\nimport { DataTable, TimeContext, useTabularData } from 'sdk'\n\nimport ConnectionsTableRow from './ConnectionsTableRow'\nimport connectionsColumnDefs from '../definitions/connectionsColumns'\n\nfunction ConnectionsTable() {\n  const timepoint = useContext(TimeContext)\n\n  const {\n    columnDefs,\n    tableContentProps,\n    sortColumn,\n    setSortColumn,\n    sortDirection,\n    setSortDirection,\n  } = useTabularData({\n    columns: connectionsColumnDefs,\n    data: getConnections(timepoint),\n    defaultSort: 'status',\n  })\n\n  return (\n    <DataTable\n      tableContentProps={tableContentProps}\n      columnDefs={columnDefs}\n      TableRow={ConnectionsTableRow}\n      sortColumn={sortColumn}\n      setSortColumn={setSortColumn}\n      sortDirection={sortDirection}\n      setSortDirection={setSortDirection}\n    />\n  )\n}\n\nexport default ConnectionsTable\n","export default \"Interactive datatable showing connections at a point in time, including:\\n - Peer ID\\n - Traffic in and out\\n - Streams per connection\\n - Age (time open)\\n - Status (active, closed...)\"","import Component from './components/ConnectionsTable'\nimport description from './description.md'\nimport screenshot from './screenshot.png'\n\nconst name = 'Connections table'\nconst tags = ['connections', 'streams', 'traffic', 'age']\n\nexport { Component, description, name, tags, screenshot }\n","import React, { useContext } from 'react'\n\nimport { getAllStreamsAtTime } from 'proto'\nimport { DataTable, TimeContext, useTabularData } from 'sdk'\n\nimport streamsColumnDefs from '../definitions/streamsColumns'\n\nfunction StreamsTable() {\n  const timepoint = useContext(TimeContext)\n\n  const streamsData = getAllStreamsAtTime(timepoint)\n\n  const {\n    columnDefs,\n    tableContentProps,\n    sortColumn,\n    setSortColumn,\n    sortDirection,\n    setSortDirection,\n  } = useTabularData({\n    columns: streamsColumnDefs,\n    data: streamsData,\n    defaultSort: 'stream-status',\n  })\n\n  return (\n    <DataTable\n      tableContentProps={tableContentProps}\n      columnDefs={columnDefs}\n      sortColumn={sortColumn}\n      setSortColumn={setSortColumn}\n      sortDirection={sortDirection}\n      setSortDirection={setSortDirection}\n    />\n  )\n}\n\nexport default StreamsTable\n","export default \"Interactive datatable showing streams at a point in time, including:\\n - Peer ID\\n - Traffic in and out\\n - Stream protocol\\n - Stream status (active, closed...)\"","import Component from './components/StreamsTable'\nimport description from './description.md'\n\nconst name = 'Streams table'\nconst tags = ['streams', 'traffic', 'streams', 'age']\n\nexport { Component, description, name, tags }\nexport { default as screenshot } from './screenshot.png'\n","import { validateComponentFields } from './utils'\n\nimport * as connectionsTable from 'connections-table'\nimport * as streamsTable from 'streams-table'\n\nconst approvedViz = [\n  validateComponentFields(connectionsTable),\n  validateComponentFields(streamsTable),\n]\n\nexport default approvedViz\n","import React from 'react'\nimport T from 'prop-types'\nimport ReactMarkdown from 'react-markdown'\n\nimport styled from 'styled-components'\n\nconst CatalogueCard = styled.div`\n  cursor: pointer;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.color('light', 'light')};\n  width: calc(100% - ${({ theme }) => theme.spacing(4)});\n  @media (min-width: 480px) {\n    width: calc(50% - ${({ theme }) => theme.spacing(4)});\n  }\n  @media (min-width: 960px) {\n    width: calc(33% - ${({ theme }) => theme.spacing(4)});\n  }\n  @media (min-width: 1480px) {\n    width: calc(25% - ${({ theme }) => theme.spacing(4)});\n  }\n  margin: ${({ theme }) => `${theme.spacing(2)}`};\n  box-shadow: ${({ theme: { color, spacing } }) =>\n    `0 0 ${spacing(2)} ${color('dark', 'light', 0.5)}`};\n  ${({ theme, isSelected }) =>\n    isSelected && `border: 4px solid ${theme.color('primary', 'mid')};`}\n`\n\nconst CardContent = styled.div`\n  padding: 0 ${({ theme }) => `${theme.spacing(2)} ${theme.spacing(2)}`};\n  flex-grow: 1;\n`\n\nconst Tag = styled.li`\n  margin: ${({ theme }) => `${theme.spacing(0.5)}`};\n  padding: ${({ theme }) => `${theme.spacing(0.5)}`};\n  list-style: none;\n  display: inline-block;\n  ${({ theme }) => theme.text('label', 'medium', theme.color('text', 'light'))}\n  font-weight: 700;\n`\n\nconst TagList = styled.ul`\n  padding: 0 ${({ theme }) => `${theme.spacing(2)} ${theme.spacing(2)}`};\n  margin: ${({ theme }) => `${theme.spacing()}`};\n  padding: 0;\n`\n\nconst StyledImg = styled.img`\n  width: 100%;\n`\n\nconst StyledHeader = styled.h3`\n  position: absolute;\n  top: ${({ theme }) => theme.spacing()};\n  left: ${({ theme }) => theme.spacing()};\n`\n\nconst StyledHeaderInner = styled.span`\n  padding: ${({ theme }) => theme.spacing()};\n  display: inline-block;\n  background: ${({ theme }) => theme.color('dark', 'mid', 0.8)};\n  color: ${({ theme }) => theme.color('light', 'light')};\n  line-height: 1em;\n`\n\nfunction CatalogueItem({\n  isSelected,\n  name,\n  description,\n  tags,\n  handleSelect,\n  screenshot,\n}) {\n  return (\n    <CatalogueCard onClick={handleSelect} isSelected={isSelected}>\n      <StyledImg src={screenshot} />\n      <StyledHeader>\n        <StyledHeaderInner>{name}</StyledHeaderInner>\n      </StyledHeader>\n      <CardContent>\n        <ReactMarkdown source={description} />\n      </CardContent>\n      <TagList>\n        {tags.map(tag => (\n          <Tag key={tag}>{tag}</Tag>\n        ))}\n      </TagList>\n    </CatalogueCard>\n  )\n}\n\nCatalogueItem.propTypes = {\n  isSelected: T.bool,\n  name: T.string,\n  description: T.string, // Markdown string from .md file and webpack raw-loader\n  tags: T.array,\n  handleSelect: T.func,\n  screenshot: T.any,\n}\n\nexport default CatalogueItem\n","import React, { useState, useContext } from 'react'\nimport styled from 'styled-components'\n\nimport { UploadDataButton, SampleDataButton, SetterContext } from 'sdk'\n\nfunction HeaderTabs() {\n  const [selectedTab, setSelectedTab] = useState(1)\n  const { dispatchDataset } = useContext(SetterContext)\n\n  const changeTab = tabIndex => {\n    dispatchDataset({ action: 'remove' })\n    setSelectedTab(tabIndex)\n  }\n\n  const TabsWrapper = styled.div`\n    display: flex;\n    height: 100%;\n    padding: ${({ theme }) => `${theme.spacing()} ${theme.spacing()} 0`};\n    font-weight: 700;\n  `\n\n  const SelectedTab = styled.div`\n    line-height: 1em;\n    display: flex;\n    align-items: center;\n    width: 50%;\n    margin: ${({ theme }) => `${theme.spacing()} ${theme.spacing()} 0`};\n    background: ${({ theme }) => theme.color('primary', 'mid')};\n    padding: ${({ theme }) => `${theme.spacing()} ${theme.spacing(2)}`};\n    border-radius: 6px 6px 0 0;\n  `\n\n  const UnselectedTab = styled.div`\n    line-height: 1em;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    width: 25%;\n    margin: ${({ theme }) => `${theme.spacing()} ${theme.spacing()} 0`};\n    background: ${({ theme }) => theme.color('secondary', 'dark')};\n    padding: ${({ theme }) => `${theme.spacing()} ${theme.spacing(2)}`};\n    color: ${({ theme }) => theme.color('light', 'light')};\n    border-radius: 6px 6px 0 0;\n  `\n\n  const ButtonWrapper = styled.span`\n    display: inline-block;\n    position: relative;\n    flex-grow: 1;\n    text-align: right;\n  `\n\n  const SampleDataTab =\n    selectedTab === 1 ? (\n      <SelectedTab>\n        <label>Use sample data:</label>\n        <ButtonWrapper>\n          <SampleDataButton title=\"Apply example data sample\" />\n        </ButtonWrapper>\n      </SelectedTab>\n    ) : (\n      <UnselectedTab onClick={() => changeTab(1)}>\n        Use sample data\n      </UnselectedTab>\n    )\n\n  const UploadDataTab =\n    selectedTab === 2 ? (\n      <SelectedTab>\n        <label>Upload data:</label>\n        <ButtonWrapper>\n          <UploadDataButton title=\"Choose protobuf data file\" />\n        </ButtonWrapper>\n      </SelectedTab>\n    ) : (\n      <UnselectedTab onClick={() => changeTab(2)}>Upload data</UnselectedTab>\n    )\n\n  const ConnectWebsocketTab =\n    selectedTab === 3 ? (\n      <SelectedTab>\n        <label>Connect websocket:</label>\n        <ButtonWrapper>\n          <UploadDataButton title=\"Enter websocket URL\" />\n        </ButtonWrapper>\n      </SelectedTab>\n    ) : (\n      <UnselectedTab onClick={() => changeTab(3)}>\n        Connect websocket\n      </UnselectedTab>\n    )\n\n  return (\n    <TabsWrapper>\n      {SampleDataTab}\n      {UploadDataTab}\n      {ConnectWebsocketTab}\n    </TabsWrapper>\n  )\n}\n\nexport default HeaderTabs\n","import React from 'react'\nimport T from 'prop-types'\n\nfunction SelectedComponent({ viz: { Component } }) {\n  // Wrap dynamically-selected function component in static\n  // function component so there's a stable base for react hooks\n  return <Component />\n}\n\nSelectedComponent.propTypes = {\n  viz: T.shape({\n    Component: T.elementType,\n  }),\n}\n\nexport default SelectedComponent\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nimport { Timeline } from 'sdk'\n\nimport approvedViz from '../definitions/approvedViz'\nimport CatalogueItem from './CatalogueItem'\nimport HeaderTabs from './HeaderTabs'\nimport SelectedComponent from './SelectedComponent'\n\nconst HEADER_HEIGHT = '64px'\nconst FOOTER_HEIGHT = 128\n\nfunction Page() {\n  const [selected, setSelected] = useState(null)\n\n  const Main = styled.div`\n    margin-top: ${HEADER_HEIGHT};\n    margin-bottom: ${FOOTER_HEIGHT};\n    background-color: ${({ theme }) => theme.color('light', 'mid')};\n    overflow-y: scroll;\n  `\n\n  const CatalogueBkg = styled.div`\n    display: flex;\n  `\n\n  const Header = styled.div`\n    position: fixed;\n    z-index: 50;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: ${HEADER_HEIGHT};\n    background: ${({ theme }) => theme.color('dark', 'mid')};\n    border-bottom: ${({ theme }) =>\n      `${theme.spacing()} solid ${theme.color('primary', 'mid')}`};\n  `\n\n  const Footer = styled.div`\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: ${FOOTER_HEIGHT + 28}px;\n    background: ${({ theme }) => theme.color('dark', 'mid')};\n    color: ${({ theme }) => theme.color('light', 'light')};\n    font-weight: bold;\n    padding: 0;\n    margin: 0;\n    border-top: ${({ theme }) =>\n      `${theme.spacing()} solid ${theme.color('dark', 'dark')}`};\n  `\n\n  return (\n    <div>\n      <Header>\n        <HeaderTabs />\n      </Header>\n      <Main>\n        {selected !== null && <SelectedComponent viz={approvedViz[selected]} />}\n        <CatalogueBkg>\n          {approvedViz.map(({ name, description, tags, screenshot }, index) => (\n            <CatalogueItem\n              key={name}\n              name={name}\n              description={description}\n              tags={tags}\n              screenshot={screenshot}\n              handleSelect={() =>\n                setSelected(index === selected ? null : index)\n              }\n              isSelected={selected === index}\n            />\n          ))}\n        </CatalogueBkg>\n      </Main>\n      <Footer>\n        <Timeline height={FOOTER_HEIGHT} />\n      </Footer>\n    </div>\n  )\n}\n\nexport default Page\n","import React from 'react'\n\nimport ContextWrappers from './components/ContextWrappers'\nimport Page from './components/Page'\n\nfunction App() {\n  return (\n    <ContextWrappers>\n      <Page />\n    </ContextWrappers>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from 'react'\nimport T from 'prop-types'\n\nimport { PeerId, TimeNumber, DataNumber } from 'sdk'\n\nfunction PeerIdContent({ value }) {\n  return (\n    <PeerId onClick={() => copyToClipboard(value)} id={value}>\n      Copy \"{value}\" to the clipboard\n    </PeerId>\n  )\n}\nPeerIdContent.propTypes = {\n  value: T.string,\n}\n\nfunction BytesContent({ value, label }) {\n  return (\n    <DataNumber value={value}>\n      {`${value} ${label} bytes during this connection's lifecycle`}\n    </DataNumber>\n  )\n}\nBytesContent.propTypes = {\n  value: T.num,\n  label: T.string,\n}\n\nfunction AgeContent({ value }) {\n  return (\n    <TimeNumber value={value}>\n      {`Connection was open for ${value} miliseconds`}\n    </TimeNumber>\n  )\n}\nAgeContent.propTypes = {\n  value: T.string,\n}\n\nfunction copyToClipboard(text) {\n  // TODO: expand this and include a toast notice on success\n  navigator.clipboard.writeText(text)\n}\n\nexport { AgeContent, BytesContent, PeerIdContent }\n","import React from 'react'\nimport T from 'prop-types'\n\nimport { PeerId, TimeNumber, DataNumber } from 'sdk'\n\nfunction PeerIdContent({ value }) {\n  return (\n    <PeerId onClick={() => copyToClipboard(value)} id={value}>\n      Copy \"{value}\" to the clipboard\n    </PeerId>\n  )\n}\nPeerIdContent.propTypes = {\n  value: T.string,\n}\n\nfunction BytesContent({ value, label }) {\n  return (\n    <DataNumber value={value}>\n      {`${value} ${label} bytes during this connection's lifecycle`}\n    </DataNumber>\n  )\n}\nBytesContent.propTypes = {\n  value: T.num,\n  label: T.string,\n}\n\nfunction AgeContent({ value }) {\n  return (\n    <TimeNumber value={value}>\n      {`Connection was open for ${value} miliseconds`}\n    </TimeNumber>\n  )\n}\nAgeContent.propTypes = {\n  value: T.string,\n}\n\nfunction copyToClipboard(text) {\n  // TODO: expand this and include a toast notice on success\n  navigator.clipboard.writeText(text)\n}\n\nexport { AgeContent, BytesContent, PeerIdContent }\n","import nexa_light from './fonts/Nexa-Light.otf'\nimport nexa_bold from './fonts/Nexa-Bold.otf'\n\nimport plexSans_extraLight from './fonts/IBMPlexSans-ExtraLight.otf'\nimport plexSans_light from './fonts/IBMPlexSans-Light.otf'\nimport plexSans_regular from './fonts/IBMPlexSans-Regular.otf'\nimport plexSans_text from './fonts/IBMPlexSans-Text.otf'\nimport plexSans_medium from './fonts/IBMPlexSans-Medium.otf'\nimport plexSans_semiBold from './fonts/IBMPlexSans-SemiBold.otf'\nimport plexSans_bold from './fonts/IBMPlexSans-Bold.otf'\n\nimport plexMono_light from './fonts/IBMPlexMono-Light.otf'\nimport plexMono_text from './fonts/IBMPlexMono-Text.otf'\nimport plexMono_semiBold from './fonts/IBMPlexMono-SemiBold.otf'\n\nfunction getFontFace({ font, file, weight = 400, format = 'opentype' }) {\n  return `\n    @font-face {\n      src: url('${file}') format('${format}');\n      font-family: ${font};\n      font-weight: ${weight};\n    }\n  `\n}\n\nexport default [\n  // Use Nexa for headings and paragraph text\n  getFontFace({\n    font: 'nexa',\n    file: nexa_light,\n  }),\n  getFontFace({\n    font: 'nexa',\n    file: nexa_bold,\n    weight: 700,\n  }),\n\n  // Use plex-sans for small labels and table content\n  // Use weights to communicate magnitude at a glance\n  // e.g. 7 gb bolder than 70 mb which is bolder than 700 kb\n  getFontFace({\n    font: 'plex-sans',\n    file: plexSans_extraLight,\n    weight: 200,\n  }),\n  getFontFace({\n    font: 'plex-sans',\n    file: plexSans_light,\n    weight: 300,\n  }),\n  getFontFace({\n    font: 'plex-sans',\n    file: plexSans_regular,\n    weight: 400,\n  }),\n  getFontFace({\n    font: 'plex-sans',\n    file: plexSans_text,\n    weight: 500,\n  }),\n  getFontFace({\n    font: 'plex-sans',\n    file: plexSans_medium,\n    weight: 600,\n  }),\n  getFontFace({\n    font: 'plex-sans',\n    file: plexSans_semiBold,\n    weight: 700,\n  }),\n  getFontFace({\n    font: 'plex-sans',\n    file: plexSans_bold,\n    weight: 800,\n  }),\n  // Use plex-mono for code and copy-paste snippets like hash ids\n  getFontFace({\n    font: 'plex-mono',\n    file: plexMono_light,\n    weight: 300,\n  }),\n  getFontFace({\n    font: 'plex-mono',\n    file: plexMono_text,\n    weight: 500,\n  }),\n  getFontFace({\n    font: 'plex-mono',\n    file: plexMono_semiBold,\n    weight: 700,\n  }),\n]\n","const palette = {\n  primary: {\n    // yellow / orange\n    light: '191, 222, 0',\n    mid: '226, 205, 3',\n    dark: '240, 145, 20',\n  },\n  secondary: {\n    // turqouise / teal\n    light: '60, 105, 283',\n    mid: '2, 131, 166',\n    dark: '0, 85, 99',\n  },\n  tertiary: {\n    // purple\n    light: '179, 65, 157',\n    mid: '154, 125, 151',\n    dark: '90, 10, 98',\n  },\n  notice: {\n    // red / magenta\n    light: '232, 32, 142',\n    mid: '252, 3, 97',\n    dark: '166, 2, 69',\n  },\n  light: {\n    // white / cream\n    light: '252, 255, 253',\n    mid: '235, 243, 243',\n    dark: '201, 209, 209',\n  },\n  dark: {\n    // dark navy / violet\n    light: '66, 63, 85',\n    mid: '33, 30, 57',\n    dark: '21, 18, 46',\n  },\n  text: {\n    // black / dark grey\n    light: '78, 78, 78',\n    mid: '33, 33, 33',\n    dark: '0, 0, 0',\n  },\n}\n\nconst color = (col, lightness, alpha) => {\n  // For example, `theme.color('secondary', 'dark', 0.5)`\n  const rgb = palette[col][lightness]\n  return alpha ? `rgba(${rgb}, ${alpha})` : `rgb(${rgb})`\n}\n\nconst spacing = (num = 1) => `${num * 8}px`\n\n// TODO: fonts need hosting\nconst typography = {\n  default: `\n    font-family: nexa, sans-serif;\n    line-height: 1.6em;\n  `,\n  body: {\n    small: `\n      font-size: 9pt;\n    `,\n    medium: `\n      font-size: 12pt;\n    `,\n    large: `\n      font-size: 16pt;\n    `,\n  },\n  label: {\n    small: `\n      font-size: 8pt;\n      line-height: 1em;\n    `,\n    medium: `\n      font-size: 10pt;\n      line-height: 1em;\n    `,\n    large: `\n      font-size: 12pt;\n      line-height: 1em;\n    `,\n  },\n  heading: {\n    small: `\n      font-size: 12pt;\n      margin: ${spacing()} 0;\n      font-weight: bold;\n    `,\n    medium: `\n      font-size: 16pt;\n      margin: ${spacing(2)} 0 ${spacing()};\n    `,\n    large: `\n      font-size: 24pt;\n      margin: ${spacing(2)} 0 ${spacing()};\n      font-weight: bold;\n    `,\n  },\n}\n\nconst text = (elem, size, rgb) => {\n  // TODO: see if styled-components has a convenient way to merge overrides\n  // css`` doesn't work here: adds commas breaking CSS rules\n  return `\n    ${typography.default}\n    ${elem && size ? typography[elem][size] : ''}\n    ${rgb ? `color: ${rgb};` : ''}\n  `\n}\n\nconst tableCell = `\n  ${text('label', 'medium')}\n  padding-top: ${spacing()};\n  padding-bottom: ${spacing()};\n  padding-left: ${spacing(3)};\n  padding-right: ${spacing(2)};\n  text-align: right;\n`\n\nexport default { color, spacing, text, styles: { tableCell } }\n","import React, { useContext } from 'react'\nimport T from 'prop-types'\nimport { createGlobalStyle, ThemeProvider } from 'styled-components'\n\nimport fontFaces from '../../theme/fontFaces'\nimport theme from '../../theme/theme.js'\n\nfunction ThemeSetter({ children }) {\n  // Ensure we don't add global styles twice\n  if (useContext(ThemeProvider)) {\n    throw new Error(\n      'ThemeWrapper cannot be nested inside another ThemeProvider or itself'\n    )\n  }\n\n  const GlobalFontFaceStyles = createGlobalStyle`\n    ${fontFaces.join('')}\n  `\n\n  const GlobalDefaults = createGlobalStyle`\n    * {\n      box-sizing: border-box;\n      ${({ theme }) => theme.text()};\n      color: ${({ theme }) => theme.color('text', 'mid')};\n    }\n  `\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalFontFaceStyles />\n      <GlobalDefaults />\n      {children}\n    </ThemeProvider>\n  )\n}\n\nThemeSetter.propTypes = {\n  children: T.node,\n}\n\nexport default ThemeSetter\n","import React, { useContext, useRef, useState } from 'react'\nimport T from 'prop-types'\nimport styled from 'styled-components'\n\nimport {\n  DataContext,\n  SetterContext,\n  TimeContext,\n} from '../context/DataProvider'\n\nconst Container = styled.div`\n  display: flex;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 100%;\n  width: 100%;\n`\nconst BeforeTime = styled.div`\n  height: 100%;\n`\nconst TimeMarker = styled.div`\n  position: absolute;\n  background-color: ${({ theme }) => theme.color('tertiary', 'mid', 0.3)};\n  width: ${({ width }) => width}px;\n  border-left: 2px solid ${({ theme }) => theme.color('tertiary', 'mid', 0.2)};\n  border-right: 2px solid ${({ theme }) => theme.color('tertiary', 'mid', 0.2)};\n  height: 100%;\n  cursor: col-resize;\n`\nconst AfterTime = styled.div`\n  flex-grow: 1;\n  background-color: ${({ theme }) => theme.color('dark', 'dark', 0.8)};\n`\n\nfunction TimeSlider({ width }) {\n  const dataset = useContext(DataContext)\n  const timepoint = useContext(TimeContext)\n  const { setTimepoint } = useContext(SetterContext)\n\n  const timeIndex = dataset.indexOf(timepoint)\n  const [decimal, setDecimal] = useState((timeIndex + 1) / dataset.length)\n  const [isSliding, setIsSliding] = useState(false)\n  const containerRef = useRef()\n\n  const widthPerTime = width / dataset.length\n\n  if (!dataset.length || !timepoint) return ''\n\n  const getSnapped = decimal => {\n    const nearestIndex = Math.floor(dataset.length * decimal)\n    const snappedDecimal = Math.min(1, (nearestIndex + 1) / dataset.length)\n\n    return {\n      snappedDecimal,\n      nearestIndex,\n    }\n  }\n\n  const slideStart = event => {\n    setIsSliding(true)\n    handleMouseMove(event)\n  }\n  const slideEnd = () => {\n    setIsSliding(false)\n  }\n  const handleMouseMove = e => {\n    if (!isSliding) return\n    const mouseX = e.nativeEvent.clientX - containerRef.current.offsetLeft\n\n    const { snappedDecimal, nearestIndex } = getSnapped(mouseX / width)\n    setDecimal(snappedDecimal)\n    if (timeIndex !== nearestIndex) setTimepoint(dataset[nearestIndex])\n  }\n\n  const timeMarkerLeft = `calc(${Math.round(decimal * 100) +\n    '%'} - ${widthPerTime}px)`\n\n  return (\n    <Container\n      onMouseDown={slideStart}\n      onMouseUp={slideEnd}\n      onMouseLeave={slideEnd}\n      onMouseMove={handleMouseMove}\n      ref={containerRef}\n    >\n      <BeforeTime style={{ width: Math.round(decimal * 100) + '%' }} />\n      <TimeMarker style={{ left: timeMarkerLeft }} width={widthPerTime} />\n      <AfterTime />\n    </Container>\n  )\n}\n\nTimeSlider.propTypes = {\n  width: T.number,\n}\n\nexport default TimeSlider\n","import React, { useMemo, useContext } from 'react'\nimport T from 'prop-types'\nimport styled from 'styled-components'\nimport { withResizeDetector } from 'react-resize-detector'\n\nimport { DataContext } from '../context/DataProvider'\nimport { stackData, fitDataToPaths } from './utils'\nimport TimelinePaths from './TimelinePaths'\nimport TimeSlider from './TimeSlider'\n\nconst HEIGHT_DEFAULT = 128\n\n// TODO: make width responsive, filling space\nfunction Timeline({ width = 700, height = HEIGHT_DEFAULT }) {\n  const dataset = useContext(DataContext)\n\n  const svgHeight = Math.min(height / 2 - 16, HEIGHT_DEFAULT)\n\n  const {\n    stackedDataIn,\n    stackedDataOut,\n    xScale,\n    yScaleIn,\n    yScaleOut,\n  } = useMemo(() => stackData(dataset), [dataset])\n\n  const fitDataArgs = [\n    width,\n    svgHeight,\n    stackedDataIn,\n    stackedDataOut,\n    xScale,\n    yScaleIn,\n    yScaleOut,\n  ]\n  const { dataInPathDefs, dataOutPathDefs } = useMemo(\n    () => fitDataToPaths(fitDataArgs),\n    [fitDataArgs]\n  )\n\n  const Container = styled.div`\n    background: ${({ theme }) => theme.color('dark', 'mid')};\n    position: relative;\n    padding: ${({ theme }) => theme.spacing()} 0;\n  `\n\n  if (!dataset || !dataset.length) return <Container />\n\n  const PathsContainer = styled.div`\n    position: relative;\n  `\n  const Label = styled.div`\n    position: absolute;\n    text-transform: uppercase;\n    font-family: plex-sans;\n    font-weight: 500;\n    font-size: 8pt;\n    color: ${({ theme }) => theme.color('light', 'light')};\n    left: ${({ theme }) => theme.spacing()};\n  `\n  const DataInLabel = styled(Label)`\n    top: 0;\n  `\n  const DataOutLabel = styled(Label)`\n    bottom: 0;\n  `\n\n  return (\n    <Container>\n      <PathsContainer>\n        <DataInLabel>Data in</DataInLabel>\n        <TimelinePaths\n          pathDefs={dataInPathDefs}\n          svgHeight={svgHeight}\n          colorKey=\"primary\"\n          style={{ marginTop: '8px' }}\n        />\n      </PathsContainer>\n      <PathsContainer>\n        <DataOutLabel>Data out</DataOutLabel>\n        <TimelinePaths\n          pathDefs={dataOutPathDefs}\n          svgHeight={svgHeight}\n          colorKey=\"secondary\"\n        />\n      </PathsContainer>\n      <TimeSlider width={width} />\n    </Container>\n  )\n}\n\nTimeline.propTypes = {\n  width: T.number,\n  height: T.number,\n}\n\nexport default withResizeDetector(Timeline)\n","'use strict';\n\nvar _defineProperty = require(\"/Users/alan/Documents/GitHub/libp2p-introspection-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar protobuf = require('./protobuf/introspection_pb');\n\nvar samples = require('./samples');\n\nvar binary = require('./utils/binary');\n\nvar enums = require('./utils/enums');\n\nvar helpers = require('./utils/helpers');\n\nmodule.exports = _objectSpread({\n  protobuf: protobuf,\n  samples: samples\n}, enums, {}, binary, {}, helpers);","/* eslint-disable */\n// source: src/introspection.proto\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\nvar jspb = require('google-protobuf');\n\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');\n\ngoog.object.extend(proto, google_protobuf_timestamp_pb);\ngoog.exportSymbol('proto.introspection.Connection', null, global);\ngoog.exportSymbol('proto.introspection.Connection.Attributes', null, global);\ngoog.exportSymbol('proto.introspection.Connection.RelayedOverCase', null, global);\ngoog.exportSymbol('proto.introspection.Connection.Timeline', null, global);\ngoog.exportSymbol('proto.introspection.DHT', null, global);\ngoog.exportSymbol('proto.introspection.DHT.Params', null, global);\ngoog.exportSymbol('proto.introspection.DHT.Query', null, global);\ngoog.exportSymbol('proto.introspection.DHT.Query.Result', null, global);\ngoog.exportSymbol('proto.introspection.DHT.Query.Trigger', null, global);\ngoog.exportSymbol('proto.introspection.DHT.Query.Type', null, global);\ngoog.exportSymbol('proto.introspection.DataGauge', null, global);\ngoog.exportSymbol('proto.introspection.EndpointPair', null, global);\ngoog.exportSymbol('proto.introspection.ResultCounter', null, global);\ngoog.exportSymbol('proto.introspection.Role', null, global);\ngoog.exportSymbol('proto.introspection.Runtime', null, global);\ngoog.exportSymbol('proto.introspection.SlidingCounter', null, global);\ngoog.exportSymbol('proto.introspection.State', null, global);\ngoog.exportSymbol('proto.introspection.Status', null, global);\ngoog.exportSymbol('proto.introspection.Stream', null, global);\ngoog.exportSymbol('proto.introspection.Stream.ConnectionRef', null, global);\ngoog.exportSymbol('proto.introspection.Stream.ConnectionRef.ConnectionCase', null, global);\ngoog.exportSymbol('proto.introspection.Stream.Timeline', null, global);\ngoog.exportSymbol('proto.introspection.StreamList', null, global);\ngoog.exportSymbol('proto.introspection.Subsystems', null, global);\ngoog.exportSymbol('proto.introspection.Traffic', null, global);\ngoog.exportSymbol('proto.introspection.Version', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.introspection.Version = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.introspection.Version, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.Version.displayName = 'proto.introspection.Version';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.introspection.ResultCounter = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.introspection.ResultCounter, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.ResultCounter.displayName = 'proto.introspection.ResultCounter';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.introspection.SlidingCounter = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.introspection.SlidingCounter, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.SlidingCounter.displayName = 'proto.introspection.SlidingCounter';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.introspection.DataGauge = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.introspection.DataGauge, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.DataGauge.displayName = 'proto.introspection.DataGauge';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.introspection.Runtime = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.introspection.Runtime, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.Runtime.displayName = 'proto.introspection.Runtime';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.introspection.EndpointPair = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.introspection.EndpointPair, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.EndpointPair.displayName = 'proto.introspection.EndpointPair';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.introspection.Traffic = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.introspection.Traffic, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.Traffic.displayName = 'proto.introspection.Traffic';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.introspection.StreamList = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.introspection.StreamList.repeatedFields_, null);\n};\n\ngoog.inherits(proto.introspection.StreamList, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.StreamList.displayName = 'proto.introspection.StreamList';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.introspection.Connection = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.introspection.Connection.repeatedFields_, proto.introspection.Connection.oneofGroups_);\n};\n\ngoog.inherits(proto.introspection.Connection, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.Connection.displayName = 'proto.introspection.Connection';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.introspection.Connection.Timeline = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.introspection.Connection.Timeline, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.Connection.Timeline.displayName = 'proto.introspection.Connection.Timeline';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.introspection.Connection.Attributes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.introspection.Connection.Attributes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.Connection.Attributes.displayName = 'proto.introspection.Connection.Attributes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.introspection.Stream = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.introspection.Stream.repeatedFields_, null);\n};\n\ngoog.inherits(proto.introspection.Stream, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.Stream.displayName = 'proto.introspection.Stream';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.introspection.Stream.ConnectionRef = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.introspection.Stream.ConnectionRef.oneofGroups_);\n};\n\ngoog.inherits(proto.introspection.Stream.ConnectionRef, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.Stream.ConnectionRef.displayName = 'proto.introspection.Stream.ConnectionRef';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.introspection.Stream.Timeline = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.introspection.Stream.Timeline, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.Stream.Timeline.displayName = 'proto.introspection.Stream.Timeline';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.introspection.DHT = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.introspection.DHT.repeatedFields_, null);\n};\n\ngoog.inherits(proto.introspection.DHT, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.DHT.displayName = 'proto.introspection.DHT';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.introspection.DHT.Params = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.introspection.DHT.Params, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.DHT.Params.displayName = 'proto.introspection.DHT.Params';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.introspection.DHT.Query = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.introspection.DHT.Query.repeatedFields_, null);\n};\n\ngoog.inherits(proto.introspection.DHT.Query, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.DHT.Query.displayName = 'proto.introspection.DHT.Query';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.introspection.Subsystems = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.introspection.Subsystems.repeatedFields_, null);\n};\n\ngoog.inherits(proto.introspection.Subsystems, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.Subsystems.displayName = 'proto.introspection.Subsystems';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.introspection.State = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.introspection.State, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.introspection.State.displayName = 'proto.introspection.State';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.Version.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.Version.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.Version} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.Version.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      version: jspb.Message.getFieldWithDefault(msg, 1, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.Version}\n */\n\n\nproto.introspection.Version.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.Version();\n  return proto.introspection.Version.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.Version} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.Version}\n */\n\n\nproto.introspection.Version.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setVersion(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.Version.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.Version.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.Version} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.Version.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getVersion();\n\n  if (f !== 0) {\n    writer.writeUint32(1, f);\n  }\n};\n/**\n * optional uint32 version = 1;\n * @return {number}\n */\n\n\nproto.introspection.Version.prototype.getVersion = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.Version.prototype.setVersion = function (value) {\n  jspb.Message.setProto3IntField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.ResultCounter.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.ResultCounter.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.ResultCounter} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.ResultCounter.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      total: jspb.Message.getFieldWithDefault(msg, 1, 0),\n      ok: jspb.Message.getFieldWithDefault(msg, 2, 0),\n      err: jspb.Message.getFieldWithDefault(msg, 3, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.ResultCounter}\n */\n\n\nproto.introspection.ResultCounter.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.ResultCounter();\n  return proto.introspection.ResultCounter.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.ResultCounter} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.ResultCounter}\n */\n\n\nproto.introspection.ResultCounter.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setTotal(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setOk(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setErr(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.ResultCounter.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.ResultCounter.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.ResultCounter} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.ResultCounter.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getTotal();\n\n  if (f !== 0) {\n    writer.writeUint32(1, f);\n  }\n\n  f = message.getOk();\n\n  if (f !== 0) {\n    writer.writeUint32(2, f);\n  }\n\n  f = message.getErr();\n\n  if (f !== 0) {\n    writer.writeUint32(3, f);\n  }\n};\n/**\n * optional uint32 total = 1;\n * @return {number}\n */\n\n\nproto.introspection.ResultCounter.prototype.getTotal = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.ResultCounter.prototype.setTotal = function (value) {\n  jspb.Message.setProto3IntField(this, 1, value);\n};\n/**\n * optional uint32 ok = 2;\n * @return {number}\n */\n\n\nproto.introspection.ResultCounter.prototype.getOk = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.ResultCounter.prototype.setOk = function (value) {\n  jspb.Message.setProto3IntField(this, 2, value);\n};\n/**\n * optional uint32 err = 3;\n * @return {number}\n */\n\n\nproto.introspection.ResultCounter.prototype.getErr = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 3, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.ResultCounter.prototype.setErr = function (value) {\n  jspb.Message.setProto3IntField(this, 3, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.SlidingCounter.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.SlidingCounter.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.SlidingCounter} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.SlidingCounter.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      over1m: jspb.Message.getFieldWithDefault(msg, 1, 0),\n      over5m: jspb.Message.getFieldWithDefault(msg, 2, 0),\n      over15m: jspb.Message.getFieldWithDefault(msg, 3, 0),\n      over30m: jspb.Message.getFieldWithDefault(msg, 4, 0),\n      over1hr: jspb.Message.getFieldWithDefault(msg, 5, 0),\n      over2hr: jspb.Message.getFieldWithDefault(msg, 6, 0),\n      over4hr: jspb.Message.getFieldWithDefault(msg, 7, 0),\n      over8hr: jspb.Message.getFieldWithDefault(msg, 8, 0),\n      over12hr: jspb.Message.getFieldWithDefault(msg, 9, 0),\n      over24hr: jspb.Message.getFieldWithDefault(msg, 10, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.SlidingCounter}\n */\n\n\nproto.introspection.SlidingCounter.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.SlidingCounter();\n  return proto.introspection.SlidingCounter.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.SlidingCounter} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.SlidingCounter}\n */\n\n\nproto.introspection.SlidingCounter.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setOver1m(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setOver5m(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setOver15m(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setOver30m(value);\n        break;\n\n      case 5:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setOver1hr(value);\n        break;\n\n      case 6:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setOver2hr(value);\n        break;\n\n      case 7:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setOver4hr(value);\n        break;\n\n      case 8:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setOver8hr(value);\n        break;\n\n      case 9:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setOver12hr(value);\n        break;\n\n      case 10:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setOver24hr(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.SlidingCounter.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.SlidingCounter.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.SlidingCounter} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.SlidingCounter.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getOver1m();\n\n  if (f !== 0) {\n    writer.writeUint32(1, f);\n  }\n\n  f = message.getOver5m();\n\n  if (f !== 0) {\n    writer.writeUint32(2, f);\n  }\n\n  f = message.getOver15m();\n\n  if (f !== 0) {\n    writer.writeUint32(3, f);\n  }\n\n  f = message.getOver30m();\n\n  if (f !== 0) {\n    writer.writeUint32(4, f);\n  }\n\n  f = message.getOver1hr();\n\n  if (f !== 0) {\n    writer.writeUint32(5, f);\n  }\n\n  f = message.getOver2hr();\n\n  if (f !== 0) {\n    writer.writeUint32(6, f);\n  }\n\n  f = message.getOver4hr();\n\n  if (f !== 0) {\n    writer.writeUint32(7, f);\n  }\n\n  f = message.getOver8hr();\n\n  if (f !== 0) {\n    writer.writeUint32(8, f);\n  }\n\n  f = message.getOver12hr();\n\n  if (f !== 0) {\n    writer.writeUint32(9, f);\n  }\n\n  f = message.getOver24hr();\n\n  if (f !== 0) {\n    writer.writeUint32(10, f);\n  }\n};\n/**\n * optional uint32 over_1m = 1;\n * @return {number}\n */\n\n\nproto.introspection.SlidingCounter.prototype.getOver1m = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.SlidingCounter.prototype.setOver1m = function (value) {\n  jspb.Message.setProto3IntField(this, 1, value);\n};\n/**\n * optional uint32 over_5m = 2;\n * @return {number}\n */\n\n\nproto.introspection.SlidingCounter.prototype.getOver5m = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.SlidingCounter.prototype.setOver5m = function (value) {\n  jspb.Message.setProto3IntField(this, 2, value);\n};\n/**\n * optional uint32 over_15m = 3;\n * @return {number}\n */\n\n\nproto.introspection.SlidingCounter.prototype.getOver15m = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 3, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.SlidingCounter.prototype.setOver15m = function (value) {\n  jspb.Message.setProto3IntField(this, 3, value);\n};\n/**\n * optional uint32 over_30m = 4;\n * @return {number}\n */\n\n\nproto.introspection.SlidingCounter.prototype.getOver30m = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 4, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.SlidingCounter.prototype.setOver30m = function (value) {\n  jspb.Message.setProto3IntField(this, 4, value);\n};\n/**\n * optional uint32 over_1hr = 5;\n * @return {number}\n */\n\n\nproto.introspection.SlidingCounter.prototype.getOver1hr = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 5, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.SlidingCounter.prototype.setOver1hr = function (value) {\n  jspb.Message.setProto3IntField(this, 5, value);\n};\n/**\n * optional uint32 over_2hr = 6;\n * @return {number}\n */\n\n\nproto.introspection.SlidingCounter.prototype.getOver2hr = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 6, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.SlidingCounter.prototype.setOver2hr = function (value) {\n  jspb.Message.setProto3IntField(this, 6, value);\n};\n/**\n * optional uint32 over_4hr = 7;\n * @return {number}\n */\n\n\nproto.introspection.SlidingCounter.prototype.getOver4hr = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 7, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.SlidingCounter.prototype.setOver4hr = function (value) {\n  jspb.Message.setProto3IntField(this, 7, value);\n};\n/**\n * optional uint32 over_8hr = 8;\n * @return {number}\n */\n\n\nproto.introspection.SlidingCounter.prototype.getOver8hr = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 8, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.SlidingCounter.prototype.setOver8hr = function (value) {\n  jspb.Message.setProto3IntField(this, 8, value);\n};\n/**\n * optional uint32 over_12hr = 9;\n * @return {number}\n */\n\n\nproto.introspection.SlidingCounter.prototype.getOver12hr = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 9, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.SlidingCounter.prototype.setOver12hr = function (value) {\n  jspb.Message.setProto3IntField(this, 9, value);\n};\n/**\n * optional uint32 over_24hr = 10;\n * @return {number}\n */\n\n\nproto.introspection.SlidingCounter.prototype.getOver24hr = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 10, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.SlidingCounter.prototype.setOver24hr = function (value) {\n  jspb.Message.setProto3IntField(this, 10, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.DataGauge.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.DataGauge.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.DataGauge} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.DataGauge.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      cumBytes: jspb.Message.getFieldWithDefault(msg, 1, 0),\n      cumPackets: jspb.Message.getFieldWithDefault(msg, 2, 0),\n      instBw: jspb.Message.getFieldWithDefault(msg, 3, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.DataGauge}\n */\n\n\nproto.introspection.DataGauge.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.DataGauge();\n  return proto.introspection.DataGauge.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.DataGauge} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.DataGauge}\n */\n\n\nproto.introspection.DataGauge.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {number} */\n        reader.readUint64();\n        msg.setCumBytes(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {number} */\n        reader.readUint64();\n        msg.setCumPackets(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {number} */\n        reader.readUint64();\n        msg.setInstBw(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.DataGauge.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.DataGauge.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.DataGauge} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.DataGauge.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getCumBytes();\n\n  if (f !== 0) {\n    writer.writeUint64(1, f);\n  }\n\n  f = message.getCumPackets();\n\n  if (f !== 0) {\n    writer.writeUint64(2, f);\n  }\n\n  f = message.getInstBw();\n\n  if (f !== 0) {\n    writer.writeUint64(3, f);\n  }\n};\n/**\n * optional uint64 cum_bytes = 1;\n * @return {number}\n */\n\n\nproto.introspection.DataGauge.prototype.getCumBytes = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.DataGauge.prototype.setCumBytes = function (value) {\n  jspb.Message.setProto3IntField(this, 1, value);\n};\n/**\n * optional uint64 cum_packets = 2;\n * @return {number}\n */\n\n\nproto.introspection.DataGauge.prototype.getCumPackets = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.DataGauge.prototype.setCumPackets = function (value) {\n  jspb.Message.setProto3IntField(this, 2, value);\n};\n/**\n * optional uint64 inst_bw = 3;\n * @return {number}\n */\n\n\nproto.introspection.DataGauge.prototype.getInstBw = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 3, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.DataGauge.prototype.setInstBw = function (value) {\n  jspb.Message.setProto3IntField(this, 3, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.Runtime.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.Runtime.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.Runtime} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.Runtime.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      implementation: jspb.Message.getFieldWithDefault(msg, 1, ''),\n      version: jspb.Message.getFieldWithDefault(msg, 2, ''),\n      platform: jspb.Message.getFieldWithDefault(msg, 3, ''),\n      peerId: jspb.Message.getFieldWithDefault(msg, 4, '')\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.Runtime}\n */\n\n\nproto.introspection.Runtime.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.Runtime();\n  return proto.introspection.Runtime.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.Runtime} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.Runtime}\n */\n\n\nproto.introspection.Runtime.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setImplementation(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setVersion(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setPlatform(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setPeerId(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.Runtime.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.Runtime.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.Runtime} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.Runtime.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getImplementation();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getVersion();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n\n  f = message.getPlatform();\n\n  if (f.length > 0) {\n    writer.writeString(3, f);\n  }\n\n  f = message.getPeerId();\n\n  if (f.length > 0) {\n    writer.writeString(4, f);\n  }\n};\n/**\n * optional string implementation = 1;\n * @return {string}\n */\n\n\nproto.introspection.Runtime.prototype.getImplementation = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, '')\n  );\n};\n/** @param {string} value */\n\n\nproto.introspection.Runtime.prototype.setImplementation = function (value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional string version = 2;\n * @return {string}\n */\n\n\nproto.introspection.Runtime.prototype.getVersion = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, '')\n  );\n};\n/** @param {string} value */\n\n\nproto.introspection.Runtime.prototype.setVersion = function (value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n/**\n * optional string platform = 3;\n * @return {string}\n */\n\n\nproto.introspection.Runtime.prototype.getPlatform = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 3, '')\n  );\n};\n/** @param {string} value */\n\n\nproto.introspection.Runtime.prototype.setPlatform = function (value) {\n  jspb.Message.setProto3StringField(this, 3, value);\n};\n/**\n * optional string peer_id = 4;\n * @return {string}\n */\n\n\nproto.introspection.Runtime.prototype.getPeerId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 4, '')\n  );\n};\n/** @param {string} value */\n\n\nproto.introspection.Runtime.prototype.setPeerId = function (value) {\n  jspb.Message.setProto3StringField(this, 4, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.EndpointPair.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.EndpointPair.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.EndpointPair} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.EndpointPair.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      srcMultiaddr: jspb.Message.getFieldWithDefault(msg, 1, ''),\n      dstMultiaddr: jspb.Message.getFieldWithDefault(msg, 2, '')\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.EndpointPair}\n */\n\n\nproto.introspection.EndpointPair.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.EndpointPair();\n  return proto.introspection.EndpointPair.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.EndpointPair} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.EndpointPair}\n */\n\n\nproto.introspection.EndpointPair.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setSrcMultiaddr(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setDstMultiaddr(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.EndpointPair.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.EndpointPair.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.EndpointPair} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.EndpointPair.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getSrcMultiaddr();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getDstMultiaddr();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n};\n/**\n * optional string src_multiaddr = 1;\n * @return {string}\n */\n\n\nproto.introspection.EndpointPair.prototype.getSrcMultiaddr = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, '')\n  );\n};\n/** @param {string} value */\n\n\nproto.introspection.EndpointPair.prototype.setSrcMultiaddr = function (value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional string dst_multiaddr = 2;\n * @return {string}\n */\n\n\nproto.introspection.EndpointPair.prototype.getDstMultiaddr = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, '')\n  );\n};\n/** @param {string} value */\n\n\nproto.introspection.EndpointPair.prototype.setDstMultiaddr = function (value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.Traffic.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.Traffic.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.Traffic} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.Traffic.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      trafficIn: (f = msg.getTrafficIn()) && proto.introspection.DataGauge.toObject(includeInstance, f),\n      trafficOut: (f = msg.getTrafficOut()) && proto.introspection.DataGauge.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.Traffic}\n */\n\n\nproto.introspection.Traffic.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.Traffic();\n  return proto.introspection.Traffic.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.Traffic} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.Traffic}\n */\n\n\nproto.introspection.Traffic.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new proto.introspection.DataGauge();\n        reader.readMessage(value, proto.introspection.DataGauge.deserializeBinaryFromReader);\n        msg.setTrafficIn(value);\n        break;\n\n      case 2:\n        var value = new proto.introspection.DataGauge();\n        reader.readMessage(value, proto.introspection.DataGauge.deserializeBinaryFromReader);\n        msg.setTrafficOut(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.Traffic.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.Traffic.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.Traffic} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.Traffic.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getTrafficIn();\n\n  if (f != null) {\n    writer.writeMessage(1, f, proto.introspection.DataGauge.serializeBinaryToWriter);\n  }\n\n  f = message.getTrafficOut();\n\n  if (f != null) {\n    writer.writeMessage(2, f, proto.introspection.DataGauge.serializeBinaryToWriter);\n  }\n};\n/**\n * optional DataGauge traffic_in = 1;\n * @return {?proto.introspection.DataGauge}\n */\n\n\nproto.introspection.Traffic.prototype.getTrafficIn = function () {\n  return (\n    /** @type{?proto.introspection.DataGauge} */\n    jspb.Message.getWrapperField(this, proto.introspection.DataGauge, 1)\n  );\n};\n/** @param {?proto.introspection.DataGauge|undefined} value */\n\n\nproto.introspection.Traffic.prototype.setTrafficIn = function (value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.Traffic.prototype.clearTrafficIn = function () {\n  this.setTrafficIn(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Traffic.prototype.hasTrafficIn = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional DataGauge traffic_out = 2;\n * @return {?proto.introspection.DataGauge}\n */\n\n\nproto.introspection.Traffic.prototype.getTrafficOut = function () {\n  return (\n    /** @type{?proto.introspection.DataGauge} */\n    jspb.Message.getWrapperField(this, proto.introspection.DataGauge, 2)\n  );\n};\n/** @param {?proto.introspection.DataGauge|undefined} value */\n\n\nproto.introspection.Traffic.prototype.setTrafficOut = function (value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.Traffic.prototype.clearTrafficOut = function () {\n  this.setTrafficOut(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Traffic.prototype.hasTrafficOut = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.introspection.StreamList.repeatedFields_ = [1, 2];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.StreamList.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.StreamList.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.StreamList} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.StreamList.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      streamIdsList: msg.getStreamIdsList_asB64(),\n      streamsList: jspb.Message.toObjectList(msg.getStreamsList(), proto.introspection.Stream.toObject, includeInstance)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.StreamList}\n */\n\n\nproto.introspection.StreamList.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.StreamList();\n  return proto.introspection.StreamList.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.StreamList} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.StreamList}\n */\n\n\nproto.introspection.StreamList.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.addStreamIds(value);\n        break;\n\n      case 2:\n        var value = new proto.introspection.Stream();\n        reader.readMessage(value, proto.introspection.Stream.deserializeBinaryFromReader);\n        msg.addStreams(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.StreamList.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.StreamList.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.StreamList} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.StreamList.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getStreamIdsList_asU8();\n\n  if (f.length > 0) {\n    writer.writeRepeatedBytes(1, f);\n  }\n\n  f = message.getStreamsList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(2, f, proto.introspection.Stream.serializeBinaryToWriter);\n  }\n};\n/**\n * repeated bytes stream_ids = 1;\n * @return {!(Array<!Uint8Array>|Array<string>)}\n */\n\n\nproto.introspection.StreamList.prototype.getStreamIdsList = function () {\n  return (\n    /** @type {!(Array<!Uint8Array>|Array<string>)} */\n    jspb.Message.getRepeatedField(this, 1)\n  );\n};\n/**\n * repeated bytes stream_ids = 1;\n * This is a type-conversion wrapper around `getStreamIdsList()`\n * @return {!Array<string>}\n */\n\n\nproto.introspection.StreamList.prototype.getStreamIdsList_asB64 = function () {\n  return (\n    /** @type {!Array<string>} */\n    jspb.Message.bytesListAsB64(this.getStreamIdsList())\n  );\n};\n/**\n * repeated bytes stream_ids = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getStreamIdsList()`\n * @return {!Array<!Uint8Array>}\n */\n\n\nproto.introspection.StreamList.prototype.getStreamIdsList_asU8 = function () {\n  return (\n    /** @type {!Array<!Uint8Array>} */\n    jspb.Message.bytesListAsU8(this.getStreamIdsList())\n  );\n};\n/** @param {!(Array<!Uint8Array>|Array<string>)} value */\n\n\nproto.introspection.StreamList.prototype.setStreamIdsList = function (value) {\n  jspb.Message.setField(this, 1, value || []);\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @param {number=} opt_index\n */\n\n\nproto.introspection.StreamList.prototype.addStreamIds = function (value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n */\n\n\nproto.introspection.StreamList.prototype.clearStreamIdsList = function () {\n  this.setStreamIdsList([]);\n};\n/**\n * repeated Stream streams = 2;\n * @return {!Array<!proto.introspection.Stream>}\n */\n\n\nproto.introspection.StreamList.prototype.getStreamsList = function () {\n  return (\n    /** @type{!Array<!proto.introspection.Stream>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.introspection.Stream, 2)\n  );\n};\n/** @param {!Array<!proto.introspection.Stream>} value */\n\n\nproto.introspection.StreamList.prototype.setStreamsList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n/**\n * @param {!proto.introspection.Stream=} opt_value\n * @param {number=} opt_index\n * @return {!proto.introspection.Stream}\n */\n\n\nproto.introspection.StreamList.prototype.addStreams = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.introspection.Stream, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n */\n\n\nproto.introspection.StreamList.prototype.clearStreamsList = function () {\n  this.setStreamsList([]);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.introspection.Connection.repeatedFields_ = [99];\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\n\nproto.introspection.Connection.oneofGroups_ = [[16, 17]];\n/**\n * @enum {number}\n */\n\nproto.introspection.Connection.RelayedOverCase = {\n  RELAYED_OVER_NOT_SET: 0,\n  CONN_ID: 16,\n  CONN: 17\n};\n/**\n * @return {proto.introspection.Connection.RelayedOverCase}\n */\n\nproto.introspection.Connection.prototype.getRelayedOverCase = function () {\n  return (\n    /** @type {proto.introspection.Connection.RelayedOverCase} */\n    jspb.Message.computeOneofCase(this, proto.introspection.Connection.oneofGroups_[0])\n  );\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.Connection.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.Connection.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.Connection} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.Connection.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: msg.getId_asB64(),\n      peerId: jspb.Message.getFieldWithDefault(msg, 2, ''),\n      status: jspb.Message.getFieldWithDefault(msg, 3, 0),\n      transportId: msg.getTransportId_asB64(),\n      endpoints: (f = msg.getEndpoints()) && proto.introspection.EndpointPair.toObject(includeInstance, f),\n      timeline: (f = msg.getTimeline()) && proto.introspection.Connection.Timeline.toObject(includeInstance, f),\n      role: jspb.Message.getFieldWithDefault(msg, 7, 0),\n      traffic: (f = msg.getTraffic()) && proto.introspection.Traffic.toObject(includeInstance, f),\n      attribs: (f = msg.getAttribs()) && proto.introspection.Connection.Attributes.toObject(includeInstance, f),\n      latencyNs: jspb.Message.getFieldWithDefault(msg, 10, 0),\n      streams: (f = msg.getStreams()) && proto.introspection.StreamList.toObject(includeInstance, f),\n      connId: msg.getConnId_asB64(),\n      conn: (f = msg.getConn()) && proto.introspection.Connection.toObject(includeInstance, f),\n      userProvidedTagsList: (f = jspb.Message.getRepeatedField(msg, 99)) == null ? undefined : f\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.Connection}\n */\n\n\nproto.introspection.Connection.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.Connection();\n  return proto.introspection.Connection.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.Connection} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.Connection}\n */\n\n\nproto.introspection.Connection.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setId(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setPeerId(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {!proto.introspection.Status} */\n        reader.readEnum();\n        msg.setStatus(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setTransportId(value);\n        break;\n\n      case 5:\n        var value = new proto.introspection.EndpointPair();\n        reader.readMessage(value, proto.introspection.EndpointPair.deserializeBinaryFromReader);\n        msg.setEndpoints(value);\n        break;\n\n      case 6:\n        var value = new proto.introspection.Connection.Timeline();\n        reader.readMessage(value, proto.introspection.Connection.Timeline.deserializeBinaryFromReader);\n        msg.setTimeline(value);\n        break;\n\n      case 7:\n        var value =\n        /** @type {!proto.introspection.Role} */\n        reader.readEnum();\n        msg.setRole(value);\n        break;\n\n      case 8:\n        var value = new proto.introspection.Traffic();\n        reader.readMessage(value, proto.introspection.Traffic.deserializeBinaryFromReader);\n        msg.setTraffic(value);\n        break;\n\n      case 9:\n        var value = new proto.introspection.Connection.Attributes();\n        reader.readMessage(value, proto.introspection.Connection.Attributes.deserializeBinaryFromReader);\n        msg.setAttribs(value);\n        break;\n\n      case 10:\n        var value =\n        /** @type {number} */\n        reader.readUint64();\n        msg.setLatencyNs(value);\n        break;\n\n      case 11:\n        var value = new proto.introspection.StreamList();\n        reader.readMessage(value, proto.introspection.StreamList.deserializeBinaryFromReader);\n        msg.setStreams(value);\n        break;\n\n      case 16:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setConnId(value);\n        break;\n\n      case 17:\n        var value = new proto.introspection.Connection();\n        reader.readMessage(value, proto.introspection.Connection.deserializeBinaryFromReader);\n        msg.setConn(value);\n        break;\n\n      case 99:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.addUserProvidedTags(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.Connection.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.Connection.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.Connection} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.Connection.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId_asU8();\n\n  if (f.length > 0) {\n    writer.writeBytes(1, f);\n  }\n\n  f = message.getPeerId();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n\n  f = message.getStatus();\n\n  if (f !== 0.0) {\n    writer.writeEnum(3, f);\n  }\n\n  f = message.getTransportId_asU8();\n\n  if (f.length > 0) {\n    writer.writeBytes(4, f);\n  }\n\n  f = message.getEndpoints();\n\n  if (f != null) {\n    writer.writeMessage(5, f, proto.introspection.EndpointPair.serializeBinaryToWriter);\n  }\n\n  f = message.getTimeline();\n\n  if (f != null) {\n    writer.writeMessage(6, f, proto.introspection.Connection.Timeline.serializeBinaryToWriter);\n  }\n\n  f = message.getRole();\n\n  if (f !== 0.0) {\n    writer.writeEnum(7, f);\n  }\n\n  f = message.getTraffic();\n\n  if (f != null) {\n    writer.writeMessage(8, f, proto.introspection.Traffic.serializeBinaryToWriter);\n  }\n\n  f = message.getAttribs();\n\n  if (f != null) {\n    writer.writeMessage(9, f, proto.introspection.Connection.Attributes.serializeBinaryToWriter);\n  }\n\n  f = message.getLatencyNs();\n\n  if (f !== 0) {\n    writer.writeUint64(10, f);\n  }\n\n  f = message.getStreams();\n\n  if (f != null) {\n    writer.writeMessage(11, f, proto.introspection.StreamList.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {!(string|Uint8Array)} */\n  jspb.Message.getField(message, 16);\n\n  if (f != null) {\n    writer.writeBytes(16, f);\n  }\n\n  f = message.getConn();\n\n  if (f != null) {\n    writer.writeMessage(17, f, proto.introspection.Connection.serializeBinaryToWriter);\n  }\n\n  f = message.getUserProvidedTagsList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedString(99, f);\n  }\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.Connection.Timeline.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.Connection.Timeline.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.Connection.Timeline} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.Connection.Timeline.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      openTs: (f = msg.getOpenTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),\n      upgradedTs: (f = msg.getUpgradedTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),\n      closeTs: (f = msg.getCloseTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.Connection.Timeline}\n */\n\n\nproto.introspection.Connection.Timeline.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.Connection.Timeline();\n  return proto.introspection.Connection.Timeline.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.Connection.Timeline} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.Connection.Timeline}\n */\n\n\nproto.introspection.Connection.Timeline.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new google_protobuf_timestamp_pb.Timestamp();\n        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);\n        msg.setOpenTs(value);\n        break;\n\n      case 2:\n        var value = new google_protobuf_timestamp_pb.Timestamp();\n        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);\n        msg.setUpgradedTs(value);\n        break;\n\n      case 3:\n        var value = new google_protobuf_timestamp_pb.Timestamp();\n        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);\n        msg.setCloseTs(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.Connection.Timeline.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.Connection.Timeline.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.Connection.Timeline} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.Connection.Timeline.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getOpenTs();\n\n  if (f != null) {\n    writer.writeMessage(1, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);\n  }\n\n  f = message.getUpgradedTs();\n\n  if (f != null) {\n    writer.writeMessage(2, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);\n  }\n\n  f = message.getCloseTs();\n\n  if (f != null) {\n    writer.writeMessage(3, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);\n  }\n};\n/**\n * optional google.protobuf.Timestamp open_ts = 1;\n * @return {?proto.google.protobuf.Timestamp}\n */\n\n\nproto.introspection.Connection.Timeline.prototype.getOpenTs = function () {\n  return (\n    /** @type{?proto.google.protobuf.Timestamp} */\n    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1)\n  );\n};\n/** @param {?proto.google.protobuf.Timestamp|undefined} value */\n\n\nproto.introspection.Connection.Timeline.prototype.setOpenTs = function (value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.Connection.Timeline.prototype.clearOpenTs = function () {\n  this.setOpenTs(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Connection.Timeline.prototype.hasOpenTs = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional google.protobuf.Timestamp upgraded_ts = 2;\n * @return {?proto.google.protobuf.Timestamp}\n */\n\n\nproto.introspection.Connection.Timeline.prototype.getUpgradedTs = function () {\n  return (\n    /** @type{?proto.google.protobuf.Timestamp} */\n    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2)\n  );\n};\n/** @param {?proto.google.protobuf.Timestamp|undefined} value */\n\n\nproto.introspection.Connection.Timeline.prototype.setUpgradedTs = function (value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.Connection.Timeline.prototype.clearUpgradedTs = function () {\n  this.setUpgradedTs(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Connection.Timeline.prototype.hasUpgradedTs = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional google.protobuf.Timestamp close_ts = 3;\n * @return {?proto.google.protobuf.Timestamp}\n */\n\n\nproto.introspection.Connection.Timeline.prototype.getCloseTs = function () {\n  return (\n    /** @type{?proto.google.protobuf.Timestamp} */\n    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3)\n  );\n};\n/** @param {?proto.google.protobuf.Timestamp|undefined} value */\n\n\nproto.introspection.Connection.Timeline.prototype.setCloseTs = function (value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.Connection.Timeline.prototype.clearCloseTs = function () {\n  this.setCloseTs(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Connection.Timeline.prototype.hasCloseTs = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.Connection.Attributes.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.Connection.Attributes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.Connection.Attributes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.Connection.Attributes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      multiplexer: jspb.Message.getFieldWithDefault(msg, 1, ''),\n      encryption: jspb.Message.getFieldWithDefault(msg, 2, '')\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.Connection.Attributes}\n */\n\n\nproto.introspection.Connection.Attributes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.Connection.Attributes();\n  return proto.introspection.Connection.Attributes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.Connection.Attributes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.Connection.Attributes}\n */\n\n\nproto.introspection.Connection.Attributes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setMultiplexer(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setEncryption(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.Connection.Attributes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.Connection.Attributes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.Connection.Attributes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.Connection.Attributes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getMultiplexer();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getEncryption();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n};\n/**\n * optional string multiplexer = 1;\n * @return {string}\n */\n\n\nproto.introspection.Connection.Attributes.prototype.getMultiplexer = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, '')\n  );\n};\n/** @param {string} value */\n\n\nproto.introspection.Connection.Attributes.prototype.setMultiplexer = function (value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional string encryption = 2;\n * @return {string}\n */\n\n\nproto.introspection.Connection.Attributes.prototype.getEncryption = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, '')\n  );\n};\n/** @param {string} value */\n\n\nproto.introspection.Connection.Attributes.prototype.setEncryption = function (value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n/**\n * optional bytes id = 1;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.introspection.Connection.prototype.getId = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 1, '')\n  );\n};\n/**\n * optional bytes id = 1;\n * This is a type-conversion wrapper around `getId()`\n * @return {string}\n */\n\n\nproto.introspection.Connection.prototype.getId_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getId())\n  );\n};\n/**\n * optional bytes id = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getId()`\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.Connection.prototype.getId_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getId())\n  );\n};\n/** @param {!(string|Uint8Array)} value */\n\n\nproto.introspection.Connection.prototype.setId = function (value) {\n  jspb.Message.setProto3BytesField(this, 1, value);\n};\n/**\n * optional string peer_id = 2;\n * @return {string}\n */\n\n\nproto.introspection.Connection.prototype.getPeerId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, '')\n  );\n};\n/** @param {string} value */\n\n\nproto.introspection.Connection.prototype.setPeerId = function (value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n/**\n * optional Status status = 3;\n * @return {!proto.introspection.Status}\n */\n\n\nproto.introspection.Connection.prototype.getStatus = function () {\n  return (\n    /** @type {!proto.introspection.Status} */\n    jspb.Message.getFieldWithDefault(this, 3, 0)\n  );\n};\n/** @param {!proto.introspection.Status} value */\n\n\nproto.introspection.Connection.prototype.setStatus = function (value) {\n  jspb.Message.setProto3EnumField(this, 3, value);\n};\n/**\n * optional bytes transport_id = 4;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.introspection.Connection.prototype.getTransportId = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 4, '')\n  );\n};\n/**\n * optional bytes transport_id = 4;\n * This is a type-conversion wrapper around `getTransportId()`\n * @return {string}\n */\n\n\nproto.introspection.Connection.prototype.getTransportId_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getTransportId())\n  );\n};\n/**\n * optional bytes transport_id = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getTransportId()`\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.Connection.prototype.getTransportId_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getTransportId())\n  );\n};\n/** @param {!(string|Uint8Array)} value */\n\n\nproto.introspection.Connection.prototype.setTransportId = function (value) {\n  jspb.Message.setProto3BytesField(this, 4, value);\n};\n/**\n * optional EndpointPair endpoints = 5;\n * @return {?proto.introspection.EndpointPair}\n */\n\n\nproto.introspection.Connection.prototype.getEndpoints = function () {\n  return (\n    /** @type{?proto.introspection.EndpointPair} */\n    jspb.Message.getWrapperField(this, proto.introspection.EndpointPair, 5)\n  );\n};\n/** @param {?proto.introspection.EndpointPair|undefined} value */\n\n\nproto.introspection.Connection.prototype.setEndpoints = function (value) {\n  jspb.Message.setWrapperField(this, 5, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.Connection.prototype.clearEndpoints = function () {\n  this.setEndpoints(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Connection.prototype.hasEndpoints = function () {\n  return jspb.Message.getField(this, 5) != null;\n};\n/**\n * optional Timeline timeline = 6;\n * @return {?proto.introspection.Connection.Timeline}\n */\n\n\nproto.introspection.Connection.prototype.getTimeline = function () {\n  return (\n    /** @type{?proto.introspection.Connection.Timeline} */\n    jspb.Message.getWrapperField(this, proto.introspection.Connection.Timeline, 6)\n  );\n};\n/** @param {?proto.introspection.Connection.Timeline|undefined} value */\n\n\nproto.introspection.Connection.prototype.setTimeline = function (value) {\n  jspb.Message.setWrapperField(this, 6, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.Connection.prototype.clearTimeline = function () {\n  this.setTimeline(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Connection.prototype.hasTimeline = function () {\n  return jspb.Message.getField(this, 6) != null;\n};\n/**\n * optional Role role = 7;\n * @return {!proto.introspection.Role}\n */\n\n\nproto.introspection.Connection.prototype.getRole = function () {\n  return (\n    /** @type {!proto.introspection.Role} */\n    jspb.Message.getFieldWithDefault(this, 7, 0)\n  );\n};\n/** @param {!proto.introspection.Role} value */\n\n\nproto.introspection.Connection.prototype.setRole = function (value) {\n  jspb.Message.setProto3EnumField(this, 7, value);\n};\n/**\n * optional Traffic traffic = 8;\n * @return {?proto.introspection.Traffic}\n */\n\n\nproto.introspection.Connection.prototype.getTraffic = function () {\n  return (\n    /** @type{?proto.introspection.Traffic} */\n    jspb.Message.getWrapperField(this, proto.introspection.Traffic, 8)\n  );\n};\n/** @param {?proto.introspection.Traffic|undefined} value */\n\n\nproto.introspection.Connection.prototype.setTraffic = function (value) {\n  jspb.Message.setWrapperField(this, 8, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.Connection.prototype.clearTraffic = function () {\n  this.setTraffic(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Connection.prototype.hasTraffic = function () {\n  return jspb.Message.getField(this, 8) != null;\n};\n/**\n * optional Attributes attribs = 9;\n * @return {?proto.introspection.Connection.Attributes}\n */\n\n\nproto.introspection.Connection.prototype.getAttribs = function () {\n  return (\n    /** @type{?proto.introspection.Connection.Attributes} */\n    jspb.Message.getWrapperField(this, proto.introspection.Connection.Attributes, 9)\n  );\n};\n/** @param {?proto.introspection.Connection.Attributes|undefined} value */\n\n\nproto.introspection.Connection.prototype.setAttribs = function (value) {\n  jspb.Message.setWrapperField(this, 9, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.Connection.prototype.clearAttribs = function () {\n  this.setAttribs(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Connection.prototype.hasAttribs = function () {\n  return jspb.Message.getField(this, 9) != null;\n};\n/**\n * optional uint64 latency_ns = 10;\n * @return {number}\n */\n\n\nproto.introspection.Connection.prototype.getLatencyNs = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 10, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.Connection.prototype.setLatencyNs = function (value) {\n  jspb.Message.setProto3IntField(this, 10, value);\n};\n/**\n * optional StreamList streams = 11;\n * @return {?proto.introspection.StreamList}\n */\n\n\nproto.introspection.Connection.prototype.getStreams = function () {\n  return (\n    /** @type{?proto.introspection.StreamList} */\n    jspb.Message.getWrapperField(this, proto.introspection.StreamList, 11)\n  );\n};\n/** @param {?proto.introspection.StreamList|undefined} value */\n\n\nproto.introspection.Connection.prototype.setStreams = function (value) {\n  jspb.Message.setWrapperField(this, 11, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.Connection.prototype.clearStreams = function () {\n  this.setStreams(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Connection.prototype.hasStreams = function () {\n  return jspb.Message.getField(this, 11) != null;\n};\n/**\n * optional bytes conn_id = 16;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.introspection.Connection.prototype.getConnId = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 16, '')\n  );\n};\n/**\n * optional bytes conn_id = 16;\n * This is a type-conversion wrapper around `getConnId()`\n * @return {string}\n */\n\n\nproto.introspection.Connection.prototype.getConnId_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getConnId())\n  );\n};\n/**\n * optional bytes conn_id = 16;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getConnId()`\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.Connection.prototype.getConnId_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getConnId())\n  );\n};\n/** @param {!(string|Uint8Array)} value */\n\n\nproto.introspection.Connection.prototype.setConnId = function (value) {\n  jspb.Message.setOneofField(this, 16, proto.introspection.Connection.oneofGroups_[0], value);\n};\n/**\n * Clears the field making it undefined.\n */\n\n\nproto.introspection.Connection.prototype.clearConnId = function () {\n  jspb.Message.setOneofField(this, 16, proto.introspection.Connection.oneofGroups_[0], undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Connection.prototype.hasConnId = function () {\n  return jspb.Message.getField(this, 16) != null;\n};\n/**\n * optional Connection conn = 17;\n * @return {?proto.introspection.Connection}\n */\n\n\nproto.introspection.Connection.prototype.getConn = function () {\n  return (\n    /** @type{?proto.introspection.Connection} */\n    jspb.Message.getWrapperField(this, proto.introspection.Connection, 17)\n  );\n};\n/** @param {?proto.introspection.Connection|undefined} value */\n\n\nproto.introspection.Connection.prototype.setConn = function (value) {\n  jspb.Message.setOneofWrapperField(this, 17, proto.introspection.Connection.oneofGroups_[0], value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.Connection.prototype.clearConn = function () {\n  this.setConn(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Connection.prototype.hasConn = function () {\n  return jspb.Message.getField(this, 17) != null;\n};\n/**\n * repeated string user_provided_tags = 99;\n * @return {!Array<string>}\n */\n\n\nproto.introspection.Connection.prototype.getUserProvidedTagsList = function () {\n  return (\n    /** @type {!Array<string>} */\n    jspb.Message.getRepeatedField(this, 99)\n  );\n};\n/** @param {!Array<string>} value */\n\n\nproto.introspection.Connection.prototype.setUserProvidedTagsList = function (value) {\n  jspb.Message.setField(this, 99, value || []);\n};\n/**\n * @param {string} value\n * @param {number=} opt_index\n */\n\n\nproto.introspection.Connection.prototype.addUserProvidedTags = function (value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 99, value, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n */\n\n\nproto.introspection.Connection.prototype.clearUserProvidedTagsList = function () {\n  this.setUserProvidedTagsList([]);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.introspection.Stream.repeatedFields_ = [99];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.Stream.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.Stream.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.Stream} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.Stream.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: msg.getId_asB64(),\n      protocol: jspb.Message.getFieldWithDefault(msg, 2, ''),\n      role: jspb.Message.getFieldWithDefault(msg, 3, 0),\n      traffic: (f = msg.getTraffic()) && proto.introspection.Traffic.toObject(includeInstance, f),\n      conn: (f = msg.getConn()) && proto.introspection.Stream.ConnectionRef.toObject(includeInstance, f),\n      timeline: (f = msg.getTimeline()) && proto.introspection.Stream.Timeline.toObject(includeInstance, f),\n      status: jspb.Message.getFieldWithDefault(msg, 7, 0),\n      latencyNs: jspb.Message.getFieldWithDefault(msg, 16, 0),\n      userProvidedTagsList: (f = jspb.Message.getRepeatedField(msg, 99)) == null ? undefined : f\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.Stream}\n */\n\n\nproto.introspection.Stream.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.Stream();\n  return proto.introspection.Stream.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.Stream} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.Stream}\n */\n\n\nproto.introspection.Stream.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setId(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setProtocol(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {!proto.introspection.Role} */\n        reader.readEnum();\n        msg.setRole(value);\n        break;\n\n      case 4:\n        var value = new proto.introspection.Traffic();\n        reader.readMessage(value, proto.introspection.Traffic.deserializeBinaryFromReader);\n        msg.setTraffic(value);\n        break;\n\n      case 5:\n        var value = new proto.introspection.Stream.ConnectionRef();\n        reader.readMessage(value, proto.introspection.Stream.ConnectionRef.deserializeBinaryFromReader);\n        msg.setConn(value);\n        break;\n\n      case 6:\n        var value = new proto.introspection.Stream.Timeline();\n        reader.readMessage(value, proto.introspection.Stream.Timeline.deserializeBinaryFromReader);\n        msg.setTimeline(value);\n        break;\n\n      case 7:\n        var value =\n        /** @type {!proto.introspection.Status} */\n        reader.readEnum();\n        msg.setStatus(value);\n        break;\n\n      case 16:\n        var value =\n        /** @type {number} */\n        reader.readUint64();\n        msg.setLatencyNs(value);\n        break;\n\n      case 99:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.addUserProvidedTags(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.Stream.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.Stream.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.Stream} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.Stream.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId_asU8();\n\n  if (f.length > 0) {\n    writer.writeBytes(1, f);\n  }\n\n  f = message.getProtocol();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n\n  f = message.getRole();\n\n  if (f !== 0.0) {\n    writer.writeEnum(3, f);\n  }\n\n  f = message.getTraffic();\n\n  if (f != null) {\n    writer.writeMessage(4, f, proto.introspection.Traffic.serializeBinaryToWriter);\n  }\n\n  f = message.getConn();\n\n  if (f != null) {\n    writer.writeMessage(5, f, proto.introspection.Stream.ConnectionRef.serializeBinaryToWriter);\n  }\n\n  f = message.getTimeline();\n\n  if (f != null) {\n    writer.writeMessage(6, f, proto.introspection.Stream.Timeline.serializeBinaryToWriter);\n  }\n\n  f = message.getStatus();\n\n  if (f !== 0.0) {\n    writer.writeEnum(7, f);\n  }\n\n  f = message.getLatencyNs();\n\n  if (f !== 0) {\n    writer.writeUint64(16, f);\n  }\n\n  f = message.getUserProvidedTagsList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedString(99, f);\n  }\n};\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\n\n\nproto.introspection.Stream.ConnectionRef.oneofGroups_ = [[1, 2]];\n/**\n * @enum {number}\n */\n\nproto.introspection.Stream.ConnectionRef.ConnectionCase = {\n  CONNECTION_NOT_SET: 0,\n  CONN: 1,\n  CONN_ID: 2\n};\n/**\n * @return {proto.introspection.Stream.ConnectionRef.ConnectionCase}\n */\n\nproto.introspection.Stream.ConnectionRef.prototype.getConnectionCase = function () {\n  return (\n    /** @type {proto.introspection.Stream.ConnectionRef.ConnectionCase} */\n    jspb.Message.computeOneofCase(this, proto.introspection.Stream.ConnectionRef.oneofGroups_[0])\n  );\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.Stream.ConnectionRef.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.Stream.ConnectionRef.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.Stream.ConnectionRef} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.Stream.ConnectionRef.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      conn: (f = msg.getConn()) && proto.introspection.Connection.toObject(includeInstance, f),\n      connId: msg.getConnId_asB64()\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.Stream.ConnectionRef}\n */\n\n\nproto.introspection.Stream.ConnectionRef.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.Stream.ConnectionRef();\n  return proto.introspection.Stream.ConnectionRef.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.Stream.ConnectionRef} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.Stream.ConnectionRef}\n */\n\n\nproto.introspection.Stream.ConnectionRef.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new proto.introspection.Connection();\n        reader.readMessage(value, proto.introspection.Connection.deserializeBinaryFromReader);\n        msg.setConn(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setConnId(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.Stream.ConnectionRef.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.Stream.ConnectionRef.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.Stream.ConnectionRef} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.Stream.ConnectionRef.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getConn();\n\n  if (f != null) {\n    writer.writeMessage(1, f, proto.introspection.Connection.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {!(string|Uint8Array)} */\n  jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeBytes(2, f);\n  }\n};\n/**\n * optional Connection conn = 1;\n * @return {?proto.introspection.Connection}\n */\n\n\nproto.introspection.Stream.ConnectionRef.prototype.getConn = function () {\n  return (\n    /** @type{?proto.introspection.Connection} */\n    jspb.Message.getWrapperField(this, proto.introspection.Connection, 1)\n  );\n};\n/** @param {?proto.introspection.Connection|undefined} value */\n\n\nproto.introspection.Stream.ConnectionRef.prototype.setConn = function (value) {\n  jspb.Message.setOneofWrapperField(this, 1, proto.introspection.Stream.ConnectionRef.oneofGroups_[0], value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.Stream.ConnectionRef.prototype.clearConn = function () {\n  this.setConn(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Stream.ConnectionRef.prototype.hasConn = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional bytes conn_id = 2;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.introspection.Stream.ConnectionRef.prototype.getConnId = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 2, '')\n  );\n};\n/**\n * optional bytes conn_id = 2;\n * This is a type-conversion wrapper around `getConnId()`\n * @return {string}\n */\n\n\nproto.introspection.Stream.ConnectionRef.prototype.getConnId_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getConnId())\n  );\n};\n/**\n * optional bytes conn_id = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getConnId()`\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.Stream.ConnectionRef.prototype.getConnId_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getConnId())\n  );\n};\n/** @param {!(string|Uint8Array)} value */\n\n\nproto.introspection.Stream.ConnectionRef.prototype.setConnId = function (value) {\n  jspb.Message.setOneofField(this, 2, proto.introspection.Stream.ConnectionRef.oneofGroups_[0], value);\n};\n/**\n * Clears the field making it undefined.\n */\n\n\nproto.introspection.Stream.ConnectionRef.prototype.clearConnId = function () {\n  jspb.Message.setOneofField(this, 2, proto.introspection.Stream.ConnectionRef.oneofGroups_[0], undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Stream.ConnectionRef.prototype.hasConnId = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.Stream.Timeline.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.Stream.Timeline.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.Stream.Timeline} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.Stream.Timeline.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      openTs: (f = msg.getOpenTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),\n      closeTs: (f = msg.getCloseTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.Stream.Timeline}\n */\n\n\nproto.introspection.Stream.Timeline.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.Stream.Timeline();\n  return proto.introspection.Stream.Timeline.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.Stream.Timeline} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.Stream.Timeline}\n */\n\n\nproto.introspection.Stream.Timeline.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new google_protobuf_timestamp_pb.Timestamp();\n        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);\n        msg.setOpenTs(value);\n        break;\n\n      case 2:\n        var value = new google_protobuf_timestamp_pb.Timestamp();\n        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);\n        msg.setCloseTs(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.Stream.Timeline.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.Stream.Timeline.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.Stream.Timeline} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.Stream.Timeline.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getOpenTs();\n\n  if (f != null) {\n    writer.writeMessage(1, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);\n  }\n\n  f = message.getCloseTs();\n\n  if (f != null) {\n    writer.writeMessage(2, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);\n  }\n};\n/**\n * optional google.protobuf.Timestamp open_ts = 1;\n * @return {?proto.google.protobuf.Timestamp}\n */\n\n\nproto.introspection.Stream.Timeline.prototype.getOpenTs = function () {\n  return (\n    /** @type{?proto.google.protobuf.Timestamp} */\n    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1)\n  );\n};\n/** @param {?proto.google.protobuf.Timestamp|undefined} value */\n\n\nproto.introspection.Stream.Timeline.prototype.setOpenTs = function (value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.Stream.Timeline.prototype.clearOpenTs = function () {\n  this.setOpenTs(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Stream.Timeline.prototype.hasOpenTs = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional google.protobuf.Timestamp close_ts = 2;\n * @return {?proto.google.protobuf.Timestamp}\n */\n\n\nproto.introspection.Stream.Timeline.prototype.getCloseTs = function () {\n  return (\n    /** @type{?proto.google.protobuf.Timestamp} */\n    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2)\n  );\n};\n/** @param {?proto.google.protobuf.Timestamp|undefined} value */\n\n\nproto.introspection.Stream.Timeline.prototype.setCloseTs = function (value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.Stream.Timeline.prototype.clearCloseTs = function () {\n  this.setCloseTs(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Stream.Timeline.prototype.hasCloseTs = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional bytes id = 1;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.introspection.Stream.prototype.getId = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 1, '')\n  );\n};\n/**\n * optional bytes id = 1;\n * This is a type-conversion wrapper around `getId()`\n * @return {string}\n */\n\n\nproto.introspection.Stream.prototype.getId_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getId())\n  );\n};\n/**\n * optional bytes id = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getId()`\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.Stream.prototype.getId_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getId())\n  );\n};\n/** @param {!(string|Uint8Array)} value */\n\n\nproto.introspection.Stream.prototype.setId = function (value) {\n  jspb.Message.setProto3BytesField(this, 1, value);\n};\n/**\n * optional string protocol = 2;\n * @return {string}\n */\n\n\nproto.introspection.Stream.prototype.getProtocol = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, '')\n  );\n};\n/** @param {string} value */\n\n\nproto.introspection.Stream.prototype.setProtocol = function (value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n/**\n * optional Role role = 3;\n * @return {!proto.introspection.Role}\n */\n\n\nproto.introspection.Stream.prototype.getRole = function () {\n  return (\n    /** @type {!proto.introspection.Role} */\n    jspb.Message.getFieldWithDefault(this, 3, 0)\n  );\n};\n/** @param {!proto.introspection.Role} value */\n\n\nproto.introspection.Stream.prototype.setRole = function (value) {\n  jspb.Message.setProto3EnumField(this, 3, value);\n};\n/**\n * optional Traffic traffic = 4;\n * @return {?proto.introspection.Traffic}\n */\n\n\nproto.introspection.Stream.prototype.getTraffic = function () {\n  return (\n    /** @type{?proto.introspection.Traffic} */\n    jspb.Message.getWrapperField(this, proto.introspection.Traffic, 4)\n  );\n};\n/** @param {?proto.introspection.Traffic|undefined} value */\n\n\nproto.introspection.Stream.prototype.setTraffic = function (value) {\n  jspb.Message.setWrapperField(this, 4, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.Stream.prototype.clearTraffic = function () {\n  this.setTraffic(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Stream.prototype.hasTraffic = function () {\n  return jspb.Message.getField(this, 4) != null;\n};\n/**\n * optional ConnectionRef conn = 5;\n * @return {?proto.introspection.Stream.ConnectionRef}\n */\n\n\nproto.introspection.Stream.prototype.getConn = function () {\n  return (\n    /** @type{?proto.introspection.Stream.ConnectionRef} */\n    jspb.Message.getWrapperField(this, proto.introspection.Stream.ConnectionRef, 5)\n  );\n};\n/** @param {?proto.introspection.Stream.ConnectionRef|undefined} value */\n\n\nproto.introspection.Stream.prototype.setConn = function (value) {\n  jspb.Message.setWrapperField(this, 5, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.Stream.prototype.clearConn = function () {\n  this.setConn(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Stream.prototype.hasConn = function () {\n  return jspb.Message.getField(this, 5) != null;\n};\n/**\n * optional Timeline timeline = 6;\n * @return {?proto.introspection.Stream.Timeline}\n */\n\n\nproto.introspection.Stream.prototype.getTimeline = function () {\n  return (\n    /** @type{?proto.introspection.Stream.Timeline} */\n    jspb.Message.getWrapperField(this, proto.introspection.Stream.Timeline, 6)\n  );\n};\n/** @param {?proto.introspection.Stream.Timeline|undefined} value */\n\n\nproto.introspection.Stream.prototype.setTimeline = function (value) {\n  jspb.Message.setWrapperField(this, 6, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.Stream.prototype.clearTimeline = function () {\n  this.setTimeline(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Stream.prototype.hasTimeline = function () {\n  return jspb.Message.getField(this, 6) != null;\n};\n/**\n * optional Status status = 7;\n * @return {!proto.introspection.Status}\n */\n\n\nproto.introspection.Stream.prototype.getStatus = function () {\n  return (\n    /** @type {!proto.introspection.Status} */\n    jspb.Message.getFieldWithDefault(this, 7, 0)\n  );\n};\n/** @param {!proto.introspection.Status} value */\n\n\nproto.introspection.Stream.prototype.setStatus = function (value) {\n  jspb.Message.setProto3EnumField(this, 7, value);\n};\n/**\n * optional uint64 latency_ns = 16;\n * @return {number}\n */\n\n\nproto.introspection.Stream.prototype.getLatencyNs = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 16, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.Stream.prototype.setLatencyNs = function (value) {\n  jspb.Message.setProto3IntField(this, 16, value);\n};\n/**\n * repeated string user_provided_tags = 99;\n * @return {!Array<string>}\n */\n\n\nproto.introspection.Stream.prototype.getUserProvidedTagsList = function () {\n  return (\n    /** @type {!Array<string>} */\n    jspb.Message.getRepeatedField(this, 99)\n  );\n};\n/** @param {!Array<string>} value */\n\n\nproto.introspection.Stream.prototype.setUserProvidedTagsList = function (value) {\n  jspb.Message.setField(this, 99, value || []);\n};\n/**\n * @param {string} value\n * @param {number=} opt_index\n */\n\n\nproto.introspection.Stream.prototype.addUserProvidedTags = function (value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 99, value, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n */\n\n\nproto.introspection.Stream.prototype.clearUserProvidedTagsList = function () {\n  this.setUserProvidedTagsList([]);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.introspection.DHT.repeatedFields_ = [5];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.DHT.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.DHT.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.DHT} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.DHT.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      protocol: jspb.Message.getFieldWithDefault(msg, 1, ''),\n      enabled: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),\n      startTs: (f = msg.getStartTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),\n      params: (f = msg.getParams()) && proto.introspection.DHT.Params.toObject(includeInstance, f),\n      queryList: jspb.Message.toObjectList(msg.getQueryList(), proto.introspection.DHT.Query.toObject, includeInstance)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.DHT}\n */\n\n\nproto.introspection.DHT.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.DHT();\n  return proto.introspection.DHT.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.DHT} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.DHT}\n */\n\n\nproto.introspection.DHT.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setProtocol(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setEnabled(value);\n        break;\n\n      case 3:\n        var value = new google_protobuf_timestamp_pb.Timestamp();\n        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);\n        msg.setStartTs(value);\n        break;\n\n      case 4:\n        var value = new proto.introspection.DHT.Params();\n        reader.readMessage(value, proto.introspection.DHT.Params.deserializeBinaryFromReader);\n        msg.setParams(value);\n        break;\n\n      case 5:\n        var value = new proto.introspection.DHT.Query();\n        reader.readMessage(value, proto.introspection.DHT.Query.deserializeBinaryFromReader);\n        msg.addQuery(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.DHT.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.DHT.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.DHT} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.DHT.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getProtocol();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getEnabled();\n\n  if (f) {\n    writer.writeBool(2, f);\n  }\n\n  f = message.getStartTs();\n\n  if (f != null) {\n    writer.writeMessage(3, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);\n  }\n\n  f = message.getParams();\n\n  if (f != null) {\n    writer.writeMessage(4, f, proto.introspection.DHT.Params.serializeBinaryToWriter);\n  }\n\n  f = message.getQueryList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(5, f, proto.introspection.DHT.Query.serializeBinaryToWriter);\n  }\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.DHT.Params.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.DHT.Params.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.DHT.Params} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.DHT.Params.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      k: jspb.Message.getFieldWithDefault(msg, 1, 0),\n      alpha: jspb.Message.getFieldWithDefault(msg, 2, 0),\n      disjointPaths: jspb.Message.getFieldWithDefault(msg, 3, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.DHT.Params}\n */\n\n\nproto.introspection.DHT.Params.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.DHT.Params();\n  return proto.introspection.DHT.Params.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.DHT.Params} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.DHT.Params}\n */\n\n\nproto.introspection.DHT.Params.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {number} */\n        reader.readUint64();\n        msg.setK(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {number} */\n        reader.readUint64();\n        msg.setAlpha(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {number} */\n        reader.readUint64();\n        msg.setDisjointPaths(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.DHT.Params.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.DHT.Params.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.DHT.Params} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.DHT.Params.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getK();\n\n  if (f !== 0) {\n    writer.writeUint64(1, f);\n  }\n\n  f = message.getAlpha();\n\n  if (f !== 0) {\n    writer.writeUint64(2, f);\n  }\n\n  f = message.getDisjointPaths();\n\n  if (f !== 0) {\n    writer.writeUint64(3, f);\n  }\n};\n/**\n * optional uint64 k = 1;\n * @return {number}\n */\n\n\nproto.introspection.DHT.Params.prototype.getK = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.DHT.Params.prototype.setK = function (value) {\n  jspb.Message.setProto3IntField(this, 1, value);\n};\n/**\n * optional uint64 alpha = 2;\n * @return {number}\n */\n\n\nproto.introspection.DHT.Params.prototype.getAlpha = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.DHT.Params.prototype.setAlpha = function (value) {\n  jspb.Message.setProto3IntField(this, 2, value);\n};\n/**\n * optional uint64 disjoint_paths = 3;\n * @return {number}\n */\n\n\nproto.introspection.DHT.Params.prototype.getDisjointPaths = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 3, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.DHT.Params.prototype.setDisjointPaths = function (value) {\n  jspb.Message.setProto3IntField(this, 3, value);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.introspection.DHT.Query.repeatedFields_ = [5];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.DHT.Query.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.DHT.Query.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.DHT.Query} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.DHT.Query.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: msg.getId_asB64(),\n      targetPeerId: jspb.Message.getFieldWithDefault(msg, 2, ''),\n      totalTimeMs: jspb.Message.getFieldWithDefault(msg, 3, 0),\n      totalSteps: jspb.Message.getFieldWithDefault(msg, 4, 0),\n      peerIdsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,\n      trigger: jspb.Message.getFieldWithDefault(msg, 6, 0),\n      type: jspb.Message.getFieldWithDefault(msg, 7, 0),\n      result: jspb.Message.getFieldWithDefault(msg, 8, 0),\n      sentTs: (f = msg.getSentTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.DHT.Query}\n */\n\n\nproto.introspection.DHT.Query.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.DHT.Query();\n  return proto.introspection.DHT.Query.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.DHT.Query} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.DHT.Query}\n */\n\n\nproto.introspection.DHT.Query.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setId(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setTargetPeerId(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {number} */\n        reader.readUint64();\n        msg.setTotalTimeMs(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {number} */\n        reader.readUint64();\n        msg.setTotalSteps(value);\n        break;\n\n      case 5:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.addPeerIds(value);\n        break;\n\n      case 6:\n        var value =\n        /** @type {!proto.introspection.DHT.Query.Trigger} */\n        reader.readEnum();\n        msg.setTrigger(value);\n        break;\n\n      case 7:\n        var value =\n        /** @type {!proto.introspection.DHT.Query.Type} */\n        reader.readEnum();\n        msg.setType(value);\n        break;\n\n      case 8:\n        var value =\n        /** @type {!proto.introspection.DHT.Query.Result} */\n        reader.readEnum();\n        msg.setResult(value);\n        break;\n\n      case 9:\n        var value = new google_protobuf_timestamp_pb.Timestamp();\n        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);\n        msg.setSentTs(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.DHT.Query.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.DHT.Query.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.DHT.Query} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.DHT.Query.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId_asU8();\n\n  if (f.length > 0) {\n    writer.writeBytes(1, f);\n  }\n\n  f = message.getTargetPeerId();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n\n  f = message.getTotalTimeMs();\n\n  if (f !== 0) {\n    writer.writeUint64(3, f);\n  }\n\n  f = message.getTotalSteps();\n\n  if (f !== 0) {\n    writer.writeUint64(4, f);\n  }\n\n  f = message.getPeerIdsList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedString(5, f);\n  }\n\n  f = message.getTrigger();\n\n  if (f !== 0.0) {\n    writer.writeEnum(6, f);\n  }\n\n  f = message.getType();\n\n  if (f !== 0.0) {\n    writer.writeEnum(7, f);\n  }\n\n  f = message.getResult();\n\n  if (f !== 0.0) {\n    writer.writeEnum(8, f);\n  }\n\n  f = message.getSentTs();\n\n  if (f != null) {\n    writer.writeMessage(9, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);\n  }\n};\n/**\n * @enum {number}\n */\n\n\nproto.introspection.DHT.Query.Trigger = {\n  API: 0,\n  DISCOVERY: 1\n};\n/**\n * @enum {number}\n */\n\nproto.introspection.DHT.Query.Type = {\n  CONTENT: 0,\n  PROVIDER: 1,\n  VALUE: 2\n};\n/**\n * @enum {number}\n */\n\nproto.introspection.DHT.Query.Result = {\n  SUCCESS: 0,\n  ERROR: 1,\n  TIMEOUT: 2,\n  PENDING: 3\n};\n/**\n * optional bytes id = 1;\n * @return {!(string|Uint8Array)}\n */\n\nproto.introspection.DHT.Query.prototype.getId = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 1, '')\n  );\n};\n/**\n * optional bytes id = 1;\n * This is a type-conversion wrapper around `getId()`\n * @return {string}\n */\n\n\nproto.introspection.DHT.Query.prototype.getId_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getId())\n  );\n};\n/**\n * optional bytes id = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getId()`\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.DHT.Query.prototype.getId_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getId())\n  );\n};\n/** @param {!(string|Uint8Array)} value */\n\n\nproto.introspection.DHT.Query.prototype.setId = function (value) {\n  jspb.Message.setProto3BytesField(this, 1, value);\n};\n/**\n * optional string target_peer_id = 2;\n * @return {string}\n */\n\n\nproto.introspection.DHT.Query.prototype.getTargetPeerId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, '')\n  );\n};\n/** @param {string} value */\n\n\nproto.introspection.DHT.Query.prototype.setTargetPeerId = function (value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n/**\n * optional uint64 total_time_ms = 3;\n * @return {number}\n */\n\n\nproto.introspection.DHT.Query.prototype.getTotalTimeMs = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 3, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.DHT.Query.prototype.setTotalTimeMs = function (value) {\n  jspb.Message.setProto3IntField(this, 3, value);\n};\n/**\n * optional uint64 total_steps = 4;\n * @return {number}\n */\n\n\nproto.introspection.DHT.Query.prototype.getTotalSteps = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 4, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.DHT.Query.prototype.setTotalSteps = function (value) {\n  jspb.Message.setProto3IntField(this, 4, value);\n};\n/**\n * repeated string peer_ids = 5;\n * @return {!Array<string>}\n */\n\n\nproto.introspection.DHT.Query.prototype.getPeerIdsList = function () {\n  return (\n    /** @type {!Array<string>} */\n    jspb.Message.getRepeatedField(this, 5)\n  );\n};\n/** @param {!Array<string>} value */\n\n\nproto.introspection.DHT.Query.prototype.setPeerIdsList = function (value) {\n  jspb.Message.setField(this, 5, value || []);\n};\n/**\n * @param {string} value\n * @param {number=} opt_index\n */\n\n\nproto.introspection.DHT.Query.prototype.addPeerIds = function (value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 5, value, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n */\n\n\nproto.introspection.DHT.Query.prototype.clearPeerIdsList = function () {\n  this.setPeerIdsList([]);\n};\n/**\n * optional Trigger trigger = 6;\n * @return {!proto.introspection.DHT.Query.Trigger}\n */\n\n\nproto.introspection.DHT.Query.prototype.getTrigger = function () {\n  return (\n    /** @type {!proto.introspection.DHT.Query.Trigger} */\n    jspb.Message.getFieldWithDefault(this, 6, 0)\n  );\n};\n/** @param {!proto.introspection.DHT.Query.Trigger} value */\n\n\nproto.introspection.DHT.Query.prototype.setTrigger = function (value) {\n  jspb.Message.setProto3EnumField(this, 6, value);\n};\n/**\n * optional Type type = 7;\n * @return {!proto.introspection.DHT.Query.Type}\n */\n\n\nproto.introspection.DHT.Query.prototype.getType = function () {\n  return (\n    /** @type {!proto.introspection.DHT.Query.Type} */\n    jspb.Message.getFieldWithDefault(this, 7, 0)\n  );\n};\n/** @param {!proto.introspection.DHT.Query.Type} value */\n\n\nproto.introspection.DHT.Query.prototype.setType = function (value) {\n  jspb.Message.setProto3EnumField(this, 7, value);\n};\n/**\n * optional Result result = 8;\n * @return {!proto.introspection.DHT.Query.Result}\n */\n\n\nproto.introspection.DHT.Query.prototype.getResult = function () {\n  return (\n    /** @type {!proto.introspection.DHT.Query.Result} */\n    jspb.Message.getFieldWithDefault(this, 8, 0)\n  );\n};\n/** @param {!proto.introspection.DHT.Query.Result} value */\n\n\nproto.introspection.DHT.Query.prototype.setResult = function (value) {\n  jspb.Message.setProto3EnumField(this, 8, value);\n};\n/**\n * optional google.protobuf.Timestamp sent_ts = 9;\n * @return {?proto.google.protobuf.Timestamp}\n */\n\n\nproto.introspection.DHT.Query.prototype.getSentTs = function () {\n  return (\n    /** @type{?proto.google.protobuf.Timestamp} */\n    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9)\n  );\n};\n/** @param {?proto.google.protobuf.Timestamp|undefined} value */\n\n\nproto.introspection.DHT.Query.prototype.setSentTs = function (value) {\n  jspb.Message.setWrapperField(this, 9, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.DHT.Query.prototype.clearSentTs = function () {\n  this.setSentTs(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.DHT.Query.prototype.hasSentTs = function () {\n  return jspb.Message.getField(this, 9) != null;\n};\n/**\n * optional string protocol = 1;\n * @return {string}\n */\n\n\nproto.introspection.DHT.prototype.getProtocol = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, '')\n  );\n};\n/** @param {string} value */\n\n\nproto.introspection.DHT.prototype.setProtocol = function (value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional bool enabled = 2;\n * @return {boolean}\n */\n\n\nproto.introspection.DHT.prototype.getEnabled = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getBooleanFieldWithDefault(this, 2, false)\n  );\n};\n/** @param {boolean} value */\n\n\nproto.introspection.DHT.prototype.setEnabled = function (value) {\n  jspb.Message.setProto3BooleanField(this, 2, value);\n};\n/**\n * optional google.protobuf.Timestamp start_ts = 3;\n * @return {?proto.google.protobuf.Timestamp}\n */\n\n\nproto.introspection.DHT.prototype.getStartTs = function () {\n  return (\n    /** @type{?proto.google.protobuf.Timestamp} */\n    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3)\n  );\n};\n/** @param {?proto.google.protobuf.Timestamp|undefined} value */\n\n\nproto.introspection.DHT.prototype.setStartTs = function (value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.DHT.prototype.clearStartTs = function () {\n  this.setStartTs(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.DHT.prototype.hasStartTs = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * optional Params params = 4;\n * @return {?proto.introspection.DHT.Params}\n */\n\n\nproto.introspection.DHT.prototype.getParams = function () {\n  return (\n    /** @type{?proto.introspection.DHT.Params} */\n    jspb.Message.getWrapperField(this, proto.introspection.DHT.Params, 4)\n  );\n};\n/** @param {?proto.introspection.DHT.Params|undefined} value */\n\n\nproto.introspection.DHT.prototype.setParams = function (value) {\n  jspb.Message.setWrapperField(this, 4, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.DHT.prototype.clearParams = function () {\n  this.setParams(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.DHT.prototype.hasParams = function () {\n  return jspb.Message.getField(this, 4) != null;\n};\n/**\n * repeated Query query = 5;\n * @return {!Array<!proto.introspection.DHT.Query>}\n */\n\n\nproto.introspection.DHT.prototype.getQueryList = function () {\n  return (\n    /** @type{!Array<!proto.introspection.DHT.Query>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.introspection.DHT.Query, 5)\n  );\n};\n/** @param {!Array<!proto.introspection.DHT.Query>} value */\n\n\nproto.introspection.DHT.prototype.setQueryList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 5, value);\n};\n/**\n * @param {!proto.introspection.DHT.Query=} opt_value\n * @param {number=} opt_index\n * @return {!proto.introspection.DHT.Query}\n */\n\n\nproto.introspection.DHT.prototype.addQuery = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.introspection.DHT.Query, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n */\n\n\nproto.introspection.DHT.prototype.clearQueryList = function () {\n  this.setQueryList([]);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.introspection.Subsystems.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.Subsystems.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.Subsystems.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.Subsystems} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.Subsystems.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      connectionsList: jspb.Message.toObjectList(msg.getConnectionsList(), proto.introspection.Connection.toObject, includeInstance),\n      dht: (f = msg.getDht()) && proto.introspection.DHT.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.Subsystems}\n */\n\n\nproto.introspection.Subsystems.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.Subsystems();\n  return proto.introspection.Subsystems.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.Subsystems} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.Subsystems}\n */\n\n\nproto.introspection.Subsystems.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new proto.introspection.Connection();\n        reader.readMessage(value, proto.introspection.Connection.deserializeBinaryFromReader);\n        msg.addConnections(value);\n        break;\n\n      case 2:\n        var value = new proto.introspection.DHT();\n        reader.readMessage(value, proto.introspection.DHT.deserializeBinaryFromReader);\n        msg.setDht(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.Subsystems.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.Subsystems.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.Subsystems} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.Subsystems.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getConnectionsList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(1, f, proto.introspection.Connection.serializeBinaryToWriter);\n  }\n\n  f = message.getDht();\n\n  if (f != null) {\n    writer.writeMessage(2, f, proto.introspection.DHT.serializeBinaryToWriter);\n  }\n};\n/**\n * repeated Connection connections = 1;\n * @return {!Array<!proto.introspection.Connection>}\n */\n\n\nproto.introspection.Subsystems.prototype.getConnectionsList = function () {\n  return (\n    /** @type{!Array<!proto.introspection.Connection>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.introspection.Connection, 1)\n  );\n};\n/** @param {!Array<!proto.introspection.Connection>} value */\n\n\nproto.introspection.Subsystems.prototype.setConnectionsList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n/**\n * @param {!proto.introspection.Connection=} opt_value\n * @param {number=} opt_index\n * @return {!proto.introspection.Connection}\n */\n\n\nproto.introspection.Subsystems.prototype.addConnections = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.introspection.Connection, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n */\n\n\nproto.introspection.Subsystems.prototype.clearConnectionsList = function () {\n  this.setConnectionsList([]);\n};\n/**\n * optional DHT dht = 2;\n * @return {?proto.introspection.DHT}\n */\n\n\nproto.introspection.Subsystems.prototype.getDht = function () {\n  return (\n    /** @type{?proto.introspection.DHT} */\n    jspb.Message.getWrapperField(this, proto.introspection.DHT, 2)\n  );\n};\n/** @param {?proto.introspection.DHT|undefined} value */\n\n\nproto.introspection.Subsystems.prototype.setDht = function (value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.Subsystems.prototype.clearDht = function () {\n  this.setDht(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.Subsystems.prototype.hasDht = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.introspection.State.prototype.toObject = function (opt_includeInstance) {\n    return proto.introspection.State.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.introspection.State} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.introspection.State.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      version: (f = msg.getVersion()) && proto.introspection.Version.toObject(includeInstance, f),\n      runtime: (f = msg.getRuntime()) && proto.introspection.Runtime.toObject(includeInstance, f),\n      subsystems: (f = msg.getSubsystems()) && proto.introspection.Subsystems.toObject(includeInstance, f),\n      traffic: (f = msg.getTraffic()) && proto.introspection.Traffic.toObject(includeInstance, f),\n      instantTs: (f = msg.getInstantTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),\n      startTs: (f = msg.getStartTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),\n      snapshotDurationMs: jspb.Message.getFieldWithDefault(msg, 7, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.introspection.State}\n */\n\n\nproto.introspection.State.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.introspection.State();\n  return proto.introspection.State.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.introspection.State} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.introspection.State}\n */\n\n\nproto.introspection.State.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new proto.introspection.Version();\n        reader.readMessage(value, proto.introspection.Version.deserializeBinaryFromReader);\n        msg.setVersion(value);\n        break;\n\n      case 2:\n        var value = new proto.introspection.Runtime();\n        reader.readMessage(value, proto.introspection.Runtime.deserializeBinaryFromReader);\n        msg.setRuntime(value);\n        break;\n\n      case 3:\n        var value = new proto.introspection.Subsystems();\n        reader.readMessage(value, proto.introspection.Subsystems.deserializeBinaryFromReader);\n        msg.setSubsystems(value);\n        break;\n\n      case 4:\n        var value = new proto.introspection.Traffic();\n        reader.readMessage(value, proto.introspection.Traffic.deserializeBinaryFromReader);\n        msg.setTraffic(value);\n        break;\n\n      case 5:\n        var value = new google_protobuf_timestamp_pb.Timestamp();\n        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);\n        msg.setInstantTs(value);\n        break;\n\n      case 6:\n        var value = new google_protobuf_timestamp_pb.Timestamp();\n        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);\n        msg.setStartTs(value);\n        break;\n\n      case 7:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setSnapshotDurationMs(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.introspection.State.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.introspection.State.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.introspection.State} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.introspection.State.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getVersion();\n\n  if (f != null) {\n    writer.writeMessage(1, f, proto.introspection.Version.serializeBinaryToWriter);\n  }\n\n  f = message.getRuntime();\n\n  if (f != null) {\n    writer.writeMessage(2, f, proto.introspection.Runtime.serializeBinaryToWriter);\n  }\n\n  f = message.getSubsystems();\n\n  if (f != null) {\n    writer.writeMessage(3, f, proto.introspection.Subsystems.serializeBinaryToWriter);\n  }\n\n  f = message.getTraffic();\n\n  if (f != null) {\n    writer.writeMessage(4, f, proto.introspection.Traffic.serializeBinaryToWriter);\n  }\n\n  f = message.getInstantTs();\n\n  if (f != null) {\n    writer.writeMessage(5, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);\n  }\n\n  f = message.getStartTs();\n\n  if (f != null) {\n    writer.writeMessage(6, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);\n  }\n\n  f = message.getSnapshotDurationMs();\n\n  if (f !== 0) {\n    writer.writeUint32(7, f);\n  }\n};\n/**\n * optional Version version = 1;\n * @return {?proto.introspection.Version}\n */\n\n\nproto.introspection.State.prototype.getVersion = function () {\n  return (\n    /** @type{?proto.introspection.Version} */\n    jspb.Message.getWrapperField(this, proto.introspection.Version, 1)\n  );\n};\n/** @param {?proto.introspection.Version|undefined} value */\n\n\nproto.introspection.State.prototype.setVersion = function (value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.State.prototype.clearVersion = function () {\n  this.setVersion(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.State.prototype.hasVersion = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional Runtime runtime = 2;\n * @return {?proto.introspection.Runtime}\n */\n\n\nproto.introspection.State.prototype.getRuntime = function () {\n  return (\n    /** @type{?proto.introspection.Runtime} */\n    jspb.Message.getWrapperField(this, proto.introspection.Runtime, 2)\n  );\n};\n/** @param {?proto.introspection.Runtime|undefined} value */\n\n\nproto.introspection.State.prototype.setRuntime = function (value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.State.prototype.clearRuntime = function () {\n  this.setRuntime(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.State.prototype.hasRuntime = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional Subsystems subsystems = 3;\n * @return {?proto.introspection.Subsystems}\n */\n\n\nproto.introspection.State.prototype.getSubsystems = function () {\n  return (\n    /** @type{?proto.introspection.Subsystems} */\n    jspb.Message.getWrapperField(this, proto.introspection.Subsystems, 3)\n  );\n};\n/** @param {?proto.introspection.Subsystems|undefined} value */\n\n\nproto.introspection.State.prototype.setSubsystems = function (value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.State.prototype.clearSubsystems = function () {\n  this.setSubsystems(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.State.prototype.hasSubsystems = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * optional Traffic traffic = 4;\n * @return {?proto.introspection.Traffic}\n */\n\n\nproto.introspection.State.prototype.getTraffic = function () {\n  return (\n    /** @type{?proto.introspection.Traffic} */\n    jspb.Message.getWrapperField(this, proto.introspection.Traffic, 4)\n  );\n};\n/** @param {?proto.introspection.Traffic|undefined} value */\n\n\nproto.introspection.State.prototype.setTraffic = function (value) {\n  jspb.Message.setWrapperField(this, 4, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.State.prototype.clearTraffic = function () {\n  this.setTraffic(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.State.prototype.hasTraffic = function () {\n  return jspb.Message.getField(this, 4) != null;\n};\n/**\n * optional google.protobuf.Timestamp instant_ts = 5;\n * @return {?proto.google.protobuf.Timestamp}\n */\n\n\nproto.introspection.State.prototype.getInstantTs = function () {\n  return (\n    /** @type{?proto.google.protobuf.Timestamp} */\n    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5)\n  );\n};\n/** @param {?proto.google.protobuf.Timestamp|undefined} value */\n\n\nproto.introspection.State.prototype.setInstantTs = function (value) {\n  jspb.Message.setWrapperField(this, 5, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.State.prototype.clearInstantTs = function () {\n  this.setInstantTs(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.State.prototype.hasInstantTs = function () {\n  return jspb.Message.getField(this, 5) != null;\n};\n/**\n * optional google.protobuf.Timestamp start_ts = 6;\n * @return {?proto.google.protobuf.Timestamp}\n */\n\n\nproto.introspection.State.prototype.getStartTs = function () {\n  return (\n    /** @type{?proto.google.protobuf.Timestamp} */\n    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6)\n  );\n};\n/** @param {?proto.google.protobuf.Timestamp|undefined} value */\n\n\nproto.introspection.State.prototype.setStartTs = function (value) {\n  jspb.Message.setWrapperField(this, 6, value);\n};\n/**\n * Clears the message field making it undefined.\n */\n\n\nproto.introspection.State.prototype.clearStartTs = function () {\n  this.setStartTs(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.introspection.State.prototype.hasStartTs = function () {\n  return jspb.Message.getField(this, 6) != null;\n};\n/**\n * optional uint32 snapshot_duration_ms = 7;\n * @return {number}\n */\n\n\nproto.introspection.State.prototype.getSnapshotDurationMs = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 7, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.introspection.State.prototype.setSnapshotDurationMs = function (value) {\n  jspb.Message.setProto3IntField(this, 7, value);\n};\n/**\n * @enum {number}\n */\n\n\nproto.introspection.Status = {\n  ACTIVE: 0,\n  CLOSED: 1,\n  OPENING: 2,\n  CLOSING: 3,\n  ERROR: 4\n};\n/**\n * @enum {number}\n */\n\nproto.introspection.Role = {\n  INITIATOR: 0,\n  RESPONDER: 1\n};\ngoog.object.extend(exports, proto.introspection);","import React, { useContext, useState } from 'react'\nimport T from 'prop-types'\n\nimport { parseBuffer, samples } from 'proto'\nimport { DataContext, SetterContext } from 'sdk'\n\nimport StyledButton from './StyledButton'\n\nfunction getSampleData() {\n  const b64string = samples[0].default\n  const buf = Buffer.from(b64string, 'base64')\n  const data = parseBuffer(buf)\n  data.isSample = true\n  return data\n}\n\nfunction SampleDataButton({ title }) {\n  const [isLoading, setIsLoading] = useState(false)\n  const { dispatchDataset } = useContext(SetterContext)\n  const dataset = useContext(DataContext)\n\n  const applySampleData = () => {\n    if (dataset.isSample) {\n      dispatchDataset({\n        action: 'remove',\n      })\n      return\n    }\n\n    // Apply data on tick after setting loading state so indicator can show\n    setIsLoading(true)\n    setTimeout(() => {\n      dispatchDataset({\n        action: 'replace',\n        data: getSampleData(),\n      })\n      setIsLoading(false)\n    }, 50)\n  }\n\n  const buttonText =\n    (isLoading && 'Loading...') ||\n    (dataset.isSample && 'Remove sample') ||\n    title\n\n  return (\n    <StyledButton\n      onClick={applySampleData}\n      isActive={isLoading || dataset.isSample}\n    >\n      {buttonText}\n    </StyledButton>\n  )\n}\n\nSampleDataButton.propTypes = {\n  title: T.string.isRequired,\n}\n\nexport default SampleDataButton\n","import React, { useContext, useRef, useState } from 'react'\nimport T from 'prop-types'\nimport styled from 'styled-components'\n\nimport { parseBuffer } from 'proto'\nimport { SetterContext } from '../context/DataProvider'\n\nimport StyledButton from './StyledButton'\n\nfunction getButtonText(isLoading, fileName, title) {\n  if (isLoading) return 'Loading...'\n  return fileName ? `Replace file '${fileName}'` : title\n}\n\nfunction UploadDataButton({ title }) {\n  const [isLoading, setIsLoading] = useState(false)\n  const [fileName, setFileName] = useState('')\n  const { dispatchDataset } = useContext(SetterContext)\n  const fileInputRef = useRef()\n\n  function handleClick() {\n    fileInputRef.current.click()\n  }\n\n  function handleUpload(event) {\n    const reader = new FileReader()\n    const file = event.target.files[0]\n    if (!file) return\n\n    reader.onload = e => handleUploadComplete(e, file.name)\n    reader.readAsArrayBuffer(file)\n    setIsLoading(true)\n  }\n\n  function handleUploadComplete(event, newFileName) {\n    const bin = event.currentTarget.result\n    const buf = Buffer.from(bin)\n    const data = parseBuffer(buf)\n    dispatchDataset({\n      action: 'replace',\n      data,\n    })\n    setIsLoading(false)\n    setFileName(newFileName)\n  }\n\n  const FileButton = styled(StyledButton)`\n    position: relative;\n    z-index: 5;\n  `\n  const NativeFileInput = styled.input`\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    left: 0;\n    pointer-events: none;\n  `\n  const RelativeSpan = styled.span`\n    position: relative;\n  `\n\n  const buttonText = getButtonText(isLoading, fileName, title)\n\n  return (\n    <RelativeSpan>\n      <FileButton onClick={handleClick}>{buttonText}</FileButton>\n      <NativeFileInput\n        ref={fileInputRef}\n        type=\"file\"\n        name=\"file\"\n        onChange={handleUpload}\n      />\n    </RelativeSpan>\n  )\n}\n\nUploadDataButton.propTypes = {\n  title: T.string.isRequired,\n}\n\nexport default UploadDataButton\n","import React from 'react'\nimport T from 'prop-types'\nimport styled from 'styled-components'\n\nimport { DataProvider } from '../components/context/DataProvider'\nimport ThemeSetter from '../components/context/ThemeSetter'\nimport Timeline from '../components/Timeline/Timeline'\n\nimport { samples, parseBuffer } from 'proto'\n\nconst Page = styled.div`\n  display: flex;\n  position: fixed;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n`\nconst Content = styled.div`\n  flex-grow: 1;\n  flex-shrink: 1;\n  overflow-y: scroll;\n  width: calc(100% - 16px);\n  padding-right: 8px;\n  &::-webkit-scrollbar {\n    -webkit-appearance: none;\n    width: 8px;\n    height: 8px;\n  }\n  &::-webkit-scrollbar-thumb {\n    border-radius: 4px;\n    background-color: rgba(0, 0, 0, 0.3);\n  }\n`\nconst Controls = styled.div`\n  border-top: 2px solid ${({ theme }) => theme.color('light', 'dark')};\n  height: 185px;\n  flex-grow: 0;\n  flex-shrink: 0;\n  margin-left: -${({ theme }) => theme.spacing()};\n  padding-left: ${({ theme }) => theme.spacing()};\n`\nfunction StorybookWrapper({ children }) {\n  const b64string = samples[0].default\n\n  const mockBuffer = Buffer.from(b64string, 'base64')\n  const mockData = parseBuffer(mockBuffer)\n\n  return (\n    <ThemeSetter>\n      <DataProvider initialData={mockData}>\n        <Page>\n          <Content>{children}</Content>\n          <Controls>\n            <Timeline />\n          </Controls>\n        </Page>\n      </DataProvider>\n    </ThemeSetter>\n  )\n}\n\nStorybookWrapper.propTypes = {\n  children: T.node,\n}\n\nexport default StorybookWrapper\n","module.exports = __webpack_public_path__ + \"static/media/screenshot.3a5301f8.png\";","module.exports = __webpack_public_path__ + \"static/media/screenshot.e1a6ab62.png\";","import styled from 'styled-components'\n\n// TODO: develop these placeholders further\nconst Table = styled.table`\n  border-collapse: collapse;\n  width: 100%;\n  color: ${({ theme }) => theme.color('dark', 'mid')};\n`\n\nconst TableRow = styled.tr`\n  border-bottom: 2px solid ${({ theme }) => theme.color('light', 'mid')};\n  ${({ highlighted, theme }) =>\n    highlighted\n      ? `background-color: ${theme.color('tertiary', 'light', 0.1)};`\n      : ''}\n`\n\nconst TableHead = styled.th`\n  ${({ theme }) => theme.styles.tableCell}\n  font-family: plex-sans;\n  font-weight: 400;\n  border-bottom: 1px solid ${({ theme }) => theme.color('light', 'dark')};\n  background-color: ${({ theme }) => theme.color('secondary', 'mid', 0.2)};\n  color: ${({ theme }) => theme.color('dark', 'light')};\n  text-transform: uppercase;\n  white-space: nowrap;\n`\n\nconst TableCell = styled.td`\n  ${({ theme }) => theme.styles.tableCell}\n  padding-right: ${({ theme }) => theme.spacing(4)};\n  font-weight: 400;\n  font-family: plex-sans;\n`\n\nexport { Table, TableRow, TableHead, TableCell }\n","import React, { useMemo } from 'react'\nimport T from 'prop-types'\n\nimport { TableRow, TableCell } from './styledTable'\n\nfunction DataTableRow({ rowContentProps, columnDefs, ...rowProps }) {\n  // Don't re-render all cells (often expensive) when only row props change\n  const prerenderedCells = useMemo(\n    () => (\n      <>\n        {columnDefs.map(\n          ({ renderContent, name, cellProps = {} }, cellIndex) => {\n            return (\n              <TableCell key={name} {...cellProps}>\n                {renderContent(rowContentProps[cellIndex])}\n              </TableCell>\n            )\n          }\n        )}\n      </>\n    ),\n    [rowContentProps, columnDefs]\n  )\n\n  return <TableRow {...rowProps}>{prerenderedCells}</TableRow>\n}\n\nDataTableRow.propTypes = {\n  rowContentProps: T.array.isRequired,\n  columnDefs: T.array.isRequired,\n}\n\nexport default DataTableRow\n","// Attribution:\n// Sort, Filter, Down and Up icons by Ryo Sato from the Noun Project\n\n// TODO: request the LibP2P icon set be expanded for these things\nimport asc from './icons/asc.svg'\nimport desc from './icons/desc.svg'\nimport sort from './icons/sort.svg'\nimport filter from './icons/filter.svg'\n\n// Export an object of url paths; importer picks path by key\nexport default {\n  asc,\n  desc,\n  sort,\n  filter,\n}\n","import React from 'react'\nimport T from 'prop-types'\nimport styled from 'styled-components'\nimport icons from '../theme/icons'\n\nfunction Icon({ type, onClick, active }) {\n  const StyledIcon = styled.img.attrs(() => ({\n    src: `${icons[type]}`,\n    onClick: onClick,\n  }))`\n    width: ${({ theme }) => theme.spacing(3)};\n    height: ${({ theme }) => theme.spacing(3)};\n    // TODO: modify SVG to use currentColor\n    color: ${({ theme }) => theme.color(active ? 'secondary' : 'light', 'mid')};\n    object-fit: cover;\n    display: inline-block;\n    vertical-align: middle;\n    ${({ theme, offset }) => offset && `margin-right: -${theme.spacing(2)};`}\n    ${onClick &&\n      `\n      cursor: pointer;\n      &:hover {\n        backgroundColor: ${({ theme }) => theme.color('light', 'mid')};\n      }\n    `}\n  `\n  return <StyledIcon />\n}\n\nIcon.propTypes = {\n  type: T.string.isRequired,\n  onClick: T.func,\n  active: T.bool,\n  offset: T.bool,\n}\n\nexport default Icon\n","import React from 'react'\nimport T from 'prop-types'\n\nimport { TableHead } from './styledTable'\nimport Icon from '../Icon'\n\nconst NON_BREAKING_SPACE = '\\u00A0'\n\nfunction getSortType(isSortable, isSorted, sortDirection) {\n  if (!isSortable) return null\n  if (!isSorted) return 'sort'\n  return sortDirection\n}\n\nfunction DataTableHead({\n  columnDef,\n  cellIndex,\n  sortColumn,\n  setSortColumn,\n  sortDirection,\n  setSortDirection,\n  ...props\n}) {\n  const isSortable = !!columnDef.sort\n  const isSorted = isSortable && sortColumn === columnDef.name\n\n  const sortIconType = getSortType(isSortable, isSorted, sortDirection)\n\n  const sortIconAction = () => {\n    if (sortIconType === 'sort') {\n      setSortColumn(columnDef.name)\n      const defaultSortDirection = columnDef.sort.defaultDirection\n      if (sortDirection !== defaultSortDirection)\n        setSortDirection(defaultSortDirection)\n      return\n    }\n    setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')\n  }\n\n  return (\n    <TableHead\n      key={columnDef.name}\n      sortable={isSortable}\n      sortDirection={isSorted ? sortDirection : null}\n      {...props}\n    >\n      {columnDef.header}\n      {isSortable && (\n        <>\n          {NON_BREAKING_SPACE}\n          <Icon\n            type={sortIconType}\n            active={sortIconType !== 'sort'}\n            onClick={() => sortIconAction()}\n            offset\n          />\n        </>\n      )}\n    </TableHead>\n  )\n}\n\nDataTableHead.propTypes = {\n  columnDef: T.object.isRequired,\n  cellIndex: T.number.isRequired,\n  sortColumn: T.string,\n  setSortColumn: T.func,\n  sortDirection: T.string,\n  setSortDirection: T.func,\n}\n\nexport default DataTableHead\n","import React from 'react'\nimport T from 'prop-types'\n\nimport DataTableRow from './DataTableRow'\nimport DataTableHead from './DataTableHead'\nimport { Table } from './styledTable'\n\nfunction DataTable({\n  tableContentProps,\n  columnDefs,\n  TableRow = DataTableRow,\n  TableHead = DataTableHead,\n  sortColumn,\n  setSortColumn,\n  sortDirection,\n  setSortDirection,\n}) {\n  return (\n    <Table>\n      <thead>\n        <tr>\n          {columnDefs.map((columnDef, cellIndex) => (\n            <TableHead\n              key={columnDef.name}\n              columnDef={columnDef}\n              cellIndex={cellIndex}\n              sortColumn={sortColumn}\n              setSortColumn={setSortColumn}\n              sortDirection={sortDirection}\n              setSortDirection={setSortDirection}\n              // filters={filters}\n              // setFilters={setFilters}\n            />\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {tableContentProps.map((rowContentProps, rowIndex) => (\n          <TableRow\n            key={`row_${rowIndex}`}\n            rowContentProps={rowContentProps}\n            columnDefs={columnDefs}\n          ></TableRow>\n        ))}\n      </tbody>\n    </Table>\n  )\n}\n\nDataTable.propTypes = {\n  tableContentProps: T.array.isRequired,\n  columnDefs: T.array.isRequired,\n  TableRow: T.any,\n  TableHead: T.any,\n  sortColumn: T.string,\n  setSortColumn: T.func,\n  sortDirection: T.string,\n  setSortDirection: T.func,\n}\n\nexport default DataTable\n","import React from 'react'\nimport T from 'prop-types'\nimport styled from 'styled-components'\n\nimport { childrenToString } from '../../utils/helpers'\n\nfunction FormatedNumber({ value, units, initialWeight = 0, children }) {\n  if (isNaN(value))\n    throw new Error(\n      `Non-numeric value passed to FormatedNumber (${value}, typeof \"${typeof value}\")`\n    )\n\n  const Unit = styled.span`\n    // Use cell right padding for units, aligning with icons\n    font-family: 'plex-sans';\n    width: ${({ theme }) => theme.spacing(4)};\n    margin-right: -${({ theme }) => theme.spacing(2)};\n    padding-left: ${({ theme }) => theme.spacing(2)};\n    display: inline-block;\n    text-align: left;\n  `\n\n  //TODO: ditch \"title\" attr and use child node if present to render proper tooltip\n  const title = childrenToString(children)\n\n  if (value === 0)\n    return (\n      <span title={title}>\n        {0}\n        <Unit />\n      </span>\n    )\n\n  const unitEntries = Object.entries(units).sort(\n    (a, b) => (a[1] > b[1] && -1) || a[1] < b[1]\n  )\n  const unitIndex = unitEntries.findIndex(([_, divider]) => value >= divider)\n  const [unit, divider] = unitEntries[unitIndex]\n\n  const formattedValue = `${(value / divider).toFixed(2)}`\n\n  const weightAdjust = (unitEntries.length - unitIndex) * 200\n\n  const NumWrapper = styled.span`\n    font-family: 'plex-mono';\n    font-weight: ${initialWeight + weightAdjust};\n    white-space: nowrap;\n    color: ${({ theme }) =>\n      theme.color('dark', 'dark', weightAdjust / 2000 + 0.5)};\n  `\n\n  return (\n    <NumWrapper title={title}>\n      {formattedValue}\n      <Unit>{unit}</Unit>\n    </NumWrapper>\n  )\n}\n\nFormatedNumber.propTypes = {\n  value: T.number.isRequired,\n  units: T.object.isRequired,\n  initialWeight: T.number,\n  children: T.any,\n}\n\nfunction TimeNumber({ value, children }) {\n  // Makes miliseconds more readable\n\n  const ms = 1\n  const s = ms * 1000\n  const mins = s * 60\n  const hrs = mins * 60\n  const days = hrs * 24\n\n  return (\n    <FormatedNumber value={value} units={{ ms, s, mins, hrs, days }}>\n      {children}\n    </FormatedNumber>\n  )\n}\n\nTimeNumber.propTypes = {\n  value: T.number.isRequired,\n  children: T.any,\n}\n\nfunction DataNumber({ value, children }) {\n  const bytes = 1\n  const kb = bytes * 1000\n  const mb = kb * 1000\n  const gb = mb * 1000\n  const tb = gb * 1000\n\n  return (\n    <FormatedNumber value={value} units={{ bytes, kb, mb, gb, tb }}>\n      {children}\n    </FormatedNumber>\n  )\n}\n\nDataNumber.propTypes = {\n  value: T.number.isRequired,\n  children: T.any,\n}\n\nexport { TimeNumber, DataNumber }\n","import React from 'react'\nimport T from 'prop-types'\nimport styled from 'styled-components'\n\nimport { childrenToString } from '../utils/helpers'\n\nconst StyledSpan = styled.span`\n  font-family: plex-mono;\n  display: inline-block;\n`\n\n// TODO: render a peer avatar based on the ID\n\nfunction PeerId({ id, children, onClick }) {\n  const truncatedId = id.slice(id.length - 5)\n\n  //TODO: ditch \"title\" attr and use child node if present to render proper tooltip\n  const title = childrenToString(children)\n\n  return (\n    <StyledSpan title={title} onClick={onClick}>\n      {'…' + truncatedId}\n    </StyledSpan>\n  )\n}\n\nPeerId.propTypes = {\n  id: T.string,\n  children: T.node,\n  onClick: T.func,\n}\n\nexport default PeerId\n","import { useState } from 'react'\nimport T from 'prop-types'\n\nfunction getNumericSorter(direction) {\n  const numericSorter = (a, b) => (direction === 'asc' ? a - b : b - a)\n  return numericSorter\n}\n\nfunction getStringSorter(direction) {\n  const caselessSorter = Intl.Collator('en').compare\n  const stringSorter = (a, b) => {\n    const sortNum = caselessSorter(a, b)\n    return direction === 'asc' ? sortNum : sortNum * -1\n  }\n  return stringSorter\n}\n\nfunction validateDirection(sortDirection, directionOptions) {\n  // null disables sorter\n  if (!sortDirection) return\n\n  const directionOptionKeys = directionOptions.map(option => option[0])\n\n  if (!directionOptionKeys.includes(sortDirection)) {\n    throw new Error(\n      `Sort direction ${sortDirection} not one of \"${directionOptionKeys.join(\n        '\", \"'\n      )}\"`\n    )\n  }\n}\n\nfunction makeSorter(sortDirection, getSorter, mapSorter) {\n  if (!sortDirection) return () => {}\n  if (!mapSorter) return getSorter(sortDirection)\n  const sorter = getSorter(sortDirection)\n  return (a, b) => sorter(mapSorter(a), mapSorter(b))\n}\n\nconst defaultOptions = [['asc', 'ascending'], ['desc', 'descending']]\n\nfunction useSorter({\n  getSorter,\n  mapSorter,\n  defaultDirection,\n  directionOptions = defaultOptions,\n  disabled = false,\n}) {\n  const [sortDirection, setSortDirection] = useState(defaultDirection || null)\n\n  if (disabled) return { sorter: () => 0, sortDirection, setSortDirection }\n\n  validateDirection(sortDirection, directionOptions)\n  const sorter = makeSorter(sortDirection, getSorter, mapSorter)\n\n  return {\n    sorter,\n    sortDirection,\n    setSortDirection,\n  }\n}\n\nuseSorter.propTypes = {\n  data: T.array.isRequired,\n  getSorter: T.func,\n  mapSorter: T.func,\n  defaultDirection: T.string,\n  directionOptions: T.arrayOf([\n    T.arrayOf([\n      T.string, // direction name\n      T.string, // user-facing direction label\n      T.node, // icon\n    ]),\n  ]),\n  disabled: T.bool,\n}\n\nexport default useSorter\n\nexport { getNumericSorter, getStringSorter }\n","import React, { useContext, useMemo, useState } from 'react'\nimport T from 'prop-types'\n\nimport useSorter from '../hooks/useSorter'\nimport { TimeContext } from '../components/context/DataProvider'\n\nfunction mapSorterToColumn(colName, columnDefs) {\n  const sortColumnIndex = columnDefs.findIndex(col => col.name === colName)\n  return row => row[sortColumnIndex].value\n}\n\nfunction getTableContentProps(data, columnDefs, timepoint) {\n  return data.map((datum, rowIndex) =>\n    columnDefs.map((columnDef, columnIndex) => ({\n      ...columnDef.getProps(datum, timepoint),\n      rowIndex,\n      columnIndex,\n    }))\n  )\n}\n\nfunction applyColumnDefaults(columns) {\n  return columns.map(column =>\n    Object.assign(\n      {},\n      {\n        header: column.name,\n        getProps: datum => ({ value: datum[column.name] }),\n        renderContent: DefaultRenderer,\n      },\n      column\n    )\n  )\n}\n\nfunction DefaultRenderer({ value }) {\n  return <>{value}</>\n}\n\nDefaultRenderer.propTypes = {\n  value: T.any,\n}\n\nfunction useTabularData({ columns, data, defaultSort, defaultFilter }) {\n  const [sortColumn, setSortColumn] = useState(defaultSort)\n  const timepoint = useContext(TimeContext)\n\n  const columnDefs = applyColumnDefaults(columns)\n  const sortDef =\n    sortColumn && columnDefs.find(col => col.name === sortColumn).sort\n\n  const { sorter, sortDirection, setSortDirection } = useSorter(\n    sortDef\n      ? {\n          ...sortDef,\n          mapSorter: mapSorterToColumn(sortColumn, columnDefs),\n        }\n      : { disabled: true }\n  )\n\n  const tableContentProps = useMemo(() => {\n    const tableContentProps = getTableContentProps(data, columnDefs, timepoint)\n    // TODO: filter here\n    tableContentProps.sort(sorter)\n    return tableContentProps\n  }, [data, columnDefs, timepoint, sorter])\n\n  return {\n    columnDefs,\n    tableContentProps,\n    sortColumn,\n    setSortColumn,\n    sortDirection,\n    setSortDirection,\n  }\n}\n\nuseTabularData.propTypes = {\n  columns: T.arrayOf(\n    T.shape({\n      name: T.string.required,\n      header: T.node,\n      getProps: T.func,\n      renderContent: T.elementType,\n      sort: T.shape({\n        sorter: T.func,\n        defaultDirection: T.string,\n        directionOptions: T.instanceOf(Map),\n      }),\n      filter: T.obj,\n    })\n  ).isRequired,\n  data: T.arrayOf(T.object).isRequired,\n  defaultSort: T.string,\n  defaultFilter: T.obj,\n}\n\nexport default useTabularData\n","// Components\nexport * from './components'\n\n// Other utilities\nexport * from './hooks'\nexport * from './utils'\nexport * from './storybook'\n","module.exports = __webpack_public_path__ + \"static/media/Nexa-Light.5c6f5c99.otf\";","module.exports = __webpack_public_path__ + \"static/media/Nexa-Bold.254370af.otf\";","module.exports = __webpack_public_path__ + \"static/media/IBMPlexSans-ExtraLight.2c560953.otf\";","module.exports = __webpack_public_path__ + \"static/media/IBMPlexSans-Light.074e5648.otf\";","module.exports = __webpack_public_path__ + \"static/media/IBMPlexSans-Regular.177a43ac.otf\";","module.exports = __webpack_public_path__ + \"static/media/IBMPlexSans-Text.9ac3a2a3.otf\";","module.exports = __webpack_public_path__ + \"static/media/IBMPlexSans-Medium.74982386.otf\";","module.exports = __webpack_public_path__ + \"static/media/IBMPlexSans-SemiBold.1f4b8be3.otf\";","module.exports = __webpack_public_path__ + \"static/media/IBMPlexSans-Bold.b7601880.otf\";","module.exports = __webpack_public_path__ + \"static/media/IBMPlexMono-Light.f9679767.otf\";","module.exports = __webpack_public_path__ + \"static/media/IBMPlexMono-Text.3ca905f2.otf\";","module.exports = __webpack_public_path__ + \"static/media/IBMPlexMono-SemiBold.dbf7ec0b.otf\";","module.exports = __webpack_public_path__ + \"static/media/asc.5626ee45.svg\";","module.exports = __webpack_public_path__ + \"static/media/desc.3a66a245.svg\";","import React, { useState, useReducer, useRef, createContext } from 'react'\nimport T from 'prop-types'\n\nimport { getLatestTimepoint } from 'proto'\n\nconst SetterContext = createContext()\n\nconst DataContext = createContext()\n\nconst TimeContext = createContext()\n\nconst PeerContext = createContext()\n\nfunction updateData(oldData, { action, data }) {\n  switch (action) {\n    case 'append':\n      return appendToDataSet(data, oldData)\n    case 'replace':\n      return replaceDataSet(data)\n    case 'remove':\n      return []\n    default:\n      throw new Error(`Action \"${action}\" not valid`)\n  }\n}\n\nfunction appendToDataSet(newData, oldData) {\n  // TODO: Update protobuf, then check peer Id matches\n  // If not, replace dataset\n  // Else, see if this timestamp already exists\n  // If it does, replace. Else, append\n  return [...oldData, ...newData]\n}\n\nfunction replaceDataSet(data) {\n  // E.g. after uploading a new file or connecting to a new source\n  return data\n}\n\nfunction DataProvider({\n  initialData = [],\n  initialTime = getLatestTimepoint(initialData),\n  children,\n}) {\n  const [dataset, dispatchDataset] = useReducer(updateData, initialData)\n  const [timepoint, setTimepoint] = useState(initialTime)\n\n  // Select a timepoint after a new dataset is added\n  if (dataset.length && (!timepoint || !dataset.includes(timepoint))) {\n    const latestTimepoint = getLatestTimepoint(dataset)\n\n    if (dataset.includes(latestTimepoint)) {\n      setTimepoint(latestTimepoint)\n    } else {\n      // Should be unreachable but if a bug is introduced, could cause an infinite rerender if allowed\n      throw new Error('Selected a timepoint not in the current dataset')\n    }\n  }\n\n  // TODO: It's theoretically possible to have multiple connections to the same peer\n  // - investigate using a connection id vs highlighting all connections to a peer\n  const [peerId, setPeerId] = useState(null)\n\n  // This is structured to avoid re-renders disrupting user interactions e.g. unfocusing input\n\n  // Make the bundling object persist, as defining the object in normal function flow\n  // causes context `value` to see a new object each run, causing re-renders every time\n  const dataSetters = useRef({\n    dispatchDataset,\n    setTimepoint,\n    setPeerId,\n  })\n\n  // Separate getters and setters so that components can set a context value without\n  // then rerendering themselves because their useContext hook consumes that value\n  return (\n    <DataContext.Provider value={dataset}>\n      <TimeContext.Provider value={timepoint}>\n        <PeerContext.Provider value={peerId}>\n          <SetterContext.Provider value={dataSetters.current}>\n            {children}\n          </SetterContext.Provider>\n        </PeerContext.Provider>\n      </TimeContext.Provider>\n    </DataContext.Provider>\n  )\n}\n\nDataProvider.propTypes = {\n  initialData: T.array,\n  initialTime: T.number,\n  children: T.node.isRequired,\n}\n\nexport { DataProvider, SetterContext, DataContext, TimeContext, PeerContext }\n","module.exports = __webpack_public_path__ + \"static/media/sort.e8066510.svg\";","module.exports = __webpack_public_path__ + \"static/media/filter.eeaeb44d.svg\";","import { getAge, getTraffic, statusNames, transportNames } from 'proto'\n\nimport { getStringSorter, getNumericSorter } from 'sdk'\n\nimport {\n  AgeContent,\n  BytesContent,\n  PeerIdContent,\n} from '../components/cellContent'\n\nimport * as statusSorter from '../utils/statusSorter'\n\nconst stringSorter = {\n  getSorter: getStringSorter,\n  defaultDirection: 'asc',\n}\n\nconst numericSorter = {\n  getSorter: getNumericSorter,\n  defaultDirection: 'desc',\n}\n\nconst peerIdCol = {\n  name: 'peerId',\n  header: 'Peer ID',\n  getProps: connection => ({ value: connection.getPeerId() }),\n  renderContent: PeerIdContent,\n  sort: stringSorter,\n}\n\nconst dataInCol = {\n  name: 'data-in',\n  header: 'Data in',\n  getProps: connection => ({\n    value: getTraffic(connection, 'in', 'bytes'),\n    label: 'inbound',\n  }),\n  renderContent: BytesContent,\n  sort: numericSorter,\n}\n\nconst dataOutCol = {\n  name: 'data-out',\n  header: 'Data out',\n  getProps: connection => ({\n    value: getTraffic(connection, 'out', 'bytes'),\n    label: 'outbound',\n  }),\n  renderContent: BytesContent,\n  sort: numericSorter,\n}\n\nconst ageCol = {\n  name: 'age',\n  header: 'Time open',\n  getProps: (connection, timepoint) => {\n    const time = timepoint.getInstantTs()\n    const openTs = connection.getTimeline().getOpenTs()\n    const closeTs = connection.getTimeline().getCloseTs()\n    const age = getAge(time, openTs, closeTs)\n    return { value: age }\n  },\n  renderContent: AgeContent,\n  sort: numericSorter,\n}\n\nconst streamsCol = {\n  name: 'streams',\n  getProps: connection => ({\n    value: connection.getStreams().getStreamsList().length,\n  }),\n  sort: numericSorter,\n}\n\nconst transportCol = {\n  name: 'transport',\n  getProps: connection => {\n    const transportIdBin = connection.getTransportId()\n    const transportIdInt = Buffer.from(transportIdBin).readUIntLE(\n      0,\n      transportIdBin.length\n    )\n    return { value: transportNames[transportIdInt] }\n  },\n  sort: stringSorter,\n}\n\nconst statusCol = {\n  name: 'status',\n  getProps: connection => ({ value: statusNames[connection.getStatus()] }),\n  sort: statusSorter,\n}\n\n// Define column order\n\nconst columns = [\n  peerIdCol,\n  dataInCol,\n  dataOutCol,\n  ageCol,\n  streamsCol,\n  transportCol,\n  statusCol,\n]\n\nexport default columns\n","const defaultDirection = 'asc'\n\nconst directionOptions = [['asc', 'Open first'], ['desc', 'Closed first']]\n\nconst openFirstOrder = ['ACTIVE', 'OPENING', 'CLOSING', 'CLOSED', 'ERROR']\nconst closedFirstOrder = ['CLOSED', 'CLOSING', 'ERROR', 'ACTIVE', 'OPENING']\n\nfunction getSorter(direction) {\n  const statusSorter = (a, b) => {\n    if (a === b) return 0\n    const statusOrder = direction === 'asc' ? openFirstOrder : closedFirstOrder\n    const sortNum = statusOrder.indexOf(a) > statusOrder.indexOf(b) ? 1 : -1\n    return sortNum\n  }\n  return statusSorter\n}\n\nexport { defaultDirection, directionOptions, getSorter }\n","import { getAge, getTraffic, statusNames, transportNames } from 'proto'\n\nimport { getStringSorter, getNumericSorter } from 'sdk'\n\nimport {\n  AgeContent,\n  BytesContent,\n  PeerIdContent,\n} from '../components/cellContent'\n\nimport * as statusSorter from '../utils/statusSorter'\n\nconst stringSorter = {\n  getSorter: getStringSorter,\n  defaultDirection: 'asc',\n}\n\nconst numericSorter = {\n  getSorter: getNumericSorter,\n  defaultDirection: 'desc',\n}\n\nconst peerIdCol = {\n  name: 'peerId',\n  header: 'Peer ID',\n  getProps: ({ connection }) => ({ value: connection.getPeerId() }),\n  renderContent: PeerIdContent,\n  sort: stringSorter,\n}\n\nconst transportCol = {\n  name: 'transport',\n  getProps: ({ connection }) => {\n    const transportIdBin = connection.getTransportId()\n    const transportIdInt = Buffer.from(transportIdBin).readUIntLE(\n      0,\n      transportIdBin.length\n    )\n    return { value: transportNames[transportIdInt] }\n  },\n  sort: stringSorter,\n}\n\nconst dataInCol = {\n  name: 'data-in',\n  header: 'Data in',\n  getProps: ({ stream }) => ({\n    value: getTraffic(stream, 'in', 'bytes'),\n    label: 'inbound',\n  }),\n  renderContent: BytesContent,\n  sort: numericSorter,\n}\n\nconst dataOutCol = {\n  name: 'data-out',\n  header: 'Data out',\n  getProps: ({ stream }) => ({\n    value: getTraffic(stream, 'out', 'bytes'),\n    label: 'outbound',\n  }),\n  renderContent: BytesContent,\n  sort: numericSorter,\n}\n\n// TODO: fix this, calculation incorrect for mock streams\n/* eslint-disable no-unused-vars */\nconst ageCol = {\n  name: 'age',\n  header: 'Time open',\n  getProps: ({ stream }, timepoint) => {\n    const time = timepoint.getInstantTs()\n    const openTs = stream.getTimeline().getOpenTs()\n    const closeTs = stream.getTimeline().getCloseTs()\n    const age = getAge(time, openTs, closeTs)\n    return { value: age }\n  },\n  renderContent: AgeContent,\n  sort: numericSorter,\n}\n/* eslint-enable no-unused-vars */\n\nconst protocolCol = {\n  name: 'protocol',\n  getProps: ({ stream }) => ({ value: stream.getProtocol() }),\n  sort: stringSorter,\n}\n\nconst streamStatusCol = {\n  name: 'stream-status',\n  header: 'status',\n  getProps: ({ stream }) => ({ value: statusNames[stream.getStatus()] }),\n  sort: statusSorter,\n}\n\n// Define column order\nconst columns = [\n  peerIdCol,\n  transportCol,\n  dataInCol,\n  dataOutCol,\n  // ageCol,\n  protocolCol,\n  streamStatusCol,\n]\n\nexport default columns\n","const defaultDirection = 'asc'\n\nconst directionOptions = [['asc', 'Open first'], ['desc', 'Closed first']]\n\nconst openFirstOrder = ['ACTIVE', 'OPENING', 'CLOSING', 'CLOSED', 'ERROR']\nconst closedFirstOrder = ['CLOSED', 'CLOSING', 'ERROR', 'ACTIVE', 'OPENING']\n\nfunction getSorter(direction) {\n  const statusSorter = (a, b) => {\n    if (a === b) return 0\n    const statusOrder = direction === 'asc' ? openFirstOrder : closedFirstOrder\n    const sortNum = statusOrder.indexOf(a) > statusOrder.indexOf(b) ? 1 : -1\n    return sortNum\n  }\n  return statusSorter\n}\n\nexport { defaultDirection, directionOptions, getSorter }\n","'use strict';\n\nmodule.exports = [require(\"\".concat(__dirname, \"/sample.mock.base64\"))];","export default \"\"","'use strict';\n\nvar _require = require('../protobuf/introspection_pb'),\n    State = _require.State;\n\nfunction parseBuffer(buf) {\n  // Expects a binary file with this repeating structure:\n  // - 4-byte version number\n  // - 4-byte length of following State message\n  // - State message\n  var byteLength = Buffer.byteLength(buf);\n  var bytesParsed = 0;\n  var messages = [];\n  var versionNumberLength = 4;\n  var stateMessageSizeLength = 4; // TODO - add async variant\n\n  while (bytesParsed < byteLength) {\n    // Skip version number\n    bytesParsed += versionNumberLength;\n    var stateMessageSize = buf.readUIntLE(bytesParsed, stateMessageSizeLength);\n    var stateMessageStart = bytesParsed + stateMessageSizeLength;\n    var stateMessageEnd = stateMessageStart + stateMessageSize;\n    var stateMessageBin = buf.toString('base64', stateMessageStart, stateMessageEnd);\n    var stateMessage = State.deserializeBinary(stateMessageBin);\n    messages.push(stateMessage);\n    bytesParsed = stateMessageEnd;\n  }\n\n  return messages;\n}\n\nfunction createBufferSegment(state, version) {\n  var _state$serializeBinar = state.serializeBinary(),\n      buffer = _state$serializeBinar.buffer,\n      byteLength = _state$serializeBinar.byteLength; // Mimics the output format of go-libp2p-introspection's ws writer.\n  // First 4 bytes is an unused version number that may be skipped for now.\n  // Then a 4-byte LE integer stating the byte length of a state / timebar position.\n\n\n  var lengthBuffer = Buffer.alloc(8);\n  lengthBuffer.writeUIntLE(byteLength, 4, 4);\n  var contentBuffer = Buffer.from(buffer);\n  return Buffer.concat([lengthBuffer, contentBuffer]);\n}\n\nmodule.exports = {\n  createBufferSegment: createBufferSegment,\n  parseBuffer: parseBuffer\n};","'use strict';\n\nvar statusNames = {\n  0: 'ACTIVE',\n  1: 'CLOSED',\n  2: 'OPENING',\n  3: 'CLOSING',\n  4: 'ERROR'\n};\nvar roleNames = {\n  0: 'INITIATOR',\n  1: 'RESPONDER'\n}; // TODO: Get this dynamically from data source\n\nvar transportNames = {\n  0: 'TCP',\n  1: 'UDP',\n  2: 'QUIC',\n  3: 'RDP'\n};\nmodule.exports = {\n  statusNames: statusNames,\n  roleNames: roleNames,\n  transportNames: transportNames\n};","'use strict'; // Convenience functions for extracting data from decoded protobuf\n\nvar _slicedToArray = require(\"/Users/alan/Documents/GitHub/libp2p-introspection-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"/Users/alan/Documents/GitHub/libp2p-introspection-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nfunction getAge(time, openTs, closeTs) {\n  if (!openTs) return 0;\n  var endTime = closeTs ? closeTs.getSeconds() : time;\n  return endTime - openTs.getSeconds();\n} // Gets the first (or latest) occurence of each connection that exists in a data set, with optional filter\n\n\nfunction getAllConnections(timepoints) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      filter = _ref.filter,\n      _ref$latest = _ref.latest,\n      latest = _ref$latest === void 0 ? false : _ref$latest;\n\n  var test = function test(testConnection) {\n    return !filter || filter(testConnection);\n  };\n\n  var allConnections = timepoints.reduce(function (previousConns, timepoint) {\n    var newConns = getConnections(timepoint).filter(function (testConn) {\n      return test(testConn) && !previousConns.some(function (existingConn) {\n        return testConn.getId().toString() === existingConn.getId().toString();\n      });\n    });\n    if (!newConns.length) return previousConns;\n    return latest ? [].concat(_toConsumableArray(newConns), _toConsumableArray(previousConns)) : [].concat(_toConsumableArray(previousConns), _toConsumableArray(newConns));\n  }, []);\n  return allConnections;\n} // Gets the connections in one timepoint\n\n\nfunction getConnections(timepoint) {\n  return timepoint ? timepoint.getSubsystems().getConnectionsList() : [];\n}\n\nfunction getAllStreamsAtTime(timepoint) {\n  if (!timepoint) return [];\n  var connections = getConnections(timepoint); // Returns array of { connection, stream }\n\n  var streams = connections.reduce(function (streams, connection) {\n    return [].concat(_toConsumableArray(streams), _toConsumableArray(connection.getStreams().getStreamsList().map(function (stream) {\n      return {\n        connection: connection,\n        stream: stream\n      };\n    })));\n  }, []);\n  return streams;\n}\n\nfunction getEnumByName(name, obj) {\n  var entry = Object.entries(obj).find(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        _ = _ref3[0],\n        value = _ref3[1];\n\n    return value === name;\n  });\n  if (!entry) throw new Error(\"\\\"\".concat(name, \"\\\" not one of \\\"\").concat(Object.values(obj).join('\", \"'), \"\\\"\"));\n  return parseInt(entry[0]);\n}\n\nfunction getLatestTimepoint(timepoints) {\n  if (!timepoints.length) return null;\n  return timepoints[timepoints.length - 1];\n}\n\nfunction getTime(timepoint, format) {\n  var timestamp = timepoint.getInstantTs().getSeconds(); // TODO: Check if protobuf treats timestamp as seconds not miliseconds\n\n  if (!format) return timestamp; // TODO: add date formating options\n}\n\nfunction getTimeIndex(timepoints, time) {\n  var index = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = timepoints[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var timepoint = _step.value;\n      if (getTime(timepoint) === time) return index;\n      index++;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n}\n\nfunction getTraffic(connection, direction, type) {\n  var byDirection = \"getTraffic\".concat(direction === 'in' ? 'In' : 'Out');\n  var byType = \"getCum\".concat(type === 'bytes' ? 'Bytes' : 'Packets');\n  return connection.getTraffic()[byDirection]()[byType]();\n}\n\nmodule.exports = {\n  getAge: getAge,\n  getAllConnections: getAllConnections,\n  getAllStreamsAtTime: getAllStreamsAtTime,\n  getConnections: getConnections,\n  getEnumByName: getEnumByName,\n  getLatestTimepoint: getLatestTimepoint,\n  getTime: getTime,\n  getTimeIndex: getTimeIndex,\n  getTraffic: getTraffic\n};"],"sourceRoot":""}